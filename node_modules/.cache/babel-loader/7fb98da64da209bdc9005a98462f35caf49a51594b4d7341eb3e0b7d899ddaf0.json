{"ast":null,"code":"var _jsxFileName = \"C:\\\\devops\\\\schedule_ringtone\\\\src\\\\components\\\\AudioPlayer.tsx\",\n  _s = $RefreshSig$();\n// Rules applied\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\nimport ringtoneService from '../services/ringtoneService';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AudioPlayer = ({\n  audioFile,\n  onRingtoneCreated\n}) => {\n  _s();\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [currentTime, setCurrentTime] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [volume, setVolume] = useState(1);\n  const [startTime, setStartTime] = useState(0);\n  const [endTime, setEndTime] = useState(0);\n  const [error, setError] = useState(null);\n  const [isCreatingRingtone, setIsCreatingRingtone] = useState(false);\n  const [successMessage, setSuccessMessage] = useState(null);\n  const audioRef = useRef(null);\n  const progressRef = useRef(null);\n  const audioContextRef = useRef(null);\n  useEffect(() => {\n    if (audioRef.current) {\n      setDuration(audioFile.duration);\n      setEndTime(audioFile.duration);\n    }\n  }, [audioFile]);\n  useEffect(() => {\n    const audio = audioRef.current;\n    if (!audio) return;\n    const updateTime = () => setCurrentTime(audio.currentTime);\n    const handleEnded = () => setIsPlaying(false);\n    const handleError = e => {\n      console.error('Audio error:', e);\n      setError('Error playing audio file');\n    };\n    audio.addEventListener('timeupdate', updateTime);\n    audio.addEventListener('ended', handleEnded);\n    audio.addEventListener('error', handleError);\n    return () => {\n      audio.removeEventListener('timeupdate', updateTime);\n      audio.removeEventListener('ended', handleEnded);\n      audio.removeEventListener('error', handleError);\n    };\n  }, []);\n  const togglePlayPause = useCallback(() => {\n    try {\n      if (!audioRef.current) return;\n      if (isPlaying) {\n        audioRef.current.pause();\n        setIsPlaying(false);\n      } else {\n        audioRef.current.play();\n        setIsPlaying(true);\n      }\n    } catch (error) {\n      console.error('Error toggling play/pause:', error);\n      setError(`Play/Pause error: ${error}`);\n    }\n  }, [isPlaying]);\n  const handleSeek = useCallback(e => {\n    try {\n      if (!audioRef.current || !progressRef.current) return;\n      const rect = progressRef.current.getBoundingClientRect();\n      const clickX = e.clientX - rect.left;\n      const percentage = clickX / rect.width;\n      const newTime = percentage * duration;\n      audioRef.current.currentTime = newTime;\n      setCurrentTime(newTime);\n    } catch (error) {\n      console.error('Error seeking:', error);\n      setError(`Seek error: ${error}`);\n    }\n  }, [duration]);\n  const handleVolumeChange = useCallback(e => {\n    try {\n      const newVolume = parseFloat(e.target.value);\n      setVolume(newVolume);\n      if (audioRef.current) {\n        audioRef.current.volume = newVolume;\n      }\n    } catch (error) {\n      console.error('Error changing volume:', error);\n      setError(`Volume error: ${error}`);\n    }\n  }, []);\n  const formatTime = useCallback(time => {\n    const minutes = Math.floor(time / 60);\n    const seconds = Math.floor(time % 60);\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\n  }, []);\n  const pinStartTime = useCallback(() => {\n    try {\n      setStartTime(currentTime);\n      setError(null);\n    } catch (error) {\n      console.error('Error pinning start time:', error);\n      setError(`Error pinning start time: ${error}`);\n    }\n  }, [currentTime]);\n  const pinEndTime = useCallback(() => {\n    try {\n      setEndTime(currentTime);\n      setError(null);\n    } catch (error) {\n      console.error('Error pinning end time:', error);\n      setError(`Error pinning end time: ${error}`);\n    }\n  }, [currentTime]);\n  const createRingtone = useCallback(async () => {\n    try {\n      if (startTime >= endTime) {\n        throw new Error('Start time must be before end time');\n      }\n      if (endTime - startTime < 1) {\n        throw new Error('Ringtone must be at least 1 second long');\n      }\n\n      // Removed 30-second limit - ringtones can now be any length\n\n      setIsCreatingRingtone(true);\n      setError(null);\n\n      // Create AudioContext if not exists\n      if (!audioContextRef.current) {\n        audioContextRef.current = new (window.AudioContext || window.webkitAudioContext)();\n      }\n      const audioContext = audioContextRef.current;\n\n      // Fetch the audio file\n      const response = await fetch(audioFile.url);\n      const arrayBuffer = await response.arrayBuffer();\n\n      // Decode the audio data\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\n\n      // Calculate the sample positions\n      const sampleRate = audioBuffer.sampleRate;\n      const startSample = Math.floor(startTime * sampleRate);\n      const endSample = Math.floor(endTime * sampleRate);\n      const segmentLength = endSample - startSample;\n\n      // Create a new audio buffer for the segment\n      const segmentBuffer = audioContext.createBuffer(audioBuffer.numberOfChannels, segmentLength, sampleRate);\n\n      // Copy the audio data for each channel\n      for (let channel = 0; channel < audioBuffer.numberOfChannels; channel++) {\n        const channelData = audioBuffer.getChannelData(channel);\n        const segmentData = segmentBuffer.getChannelData(channel);\n        for (let i = 0; i < segmentLength; i++) {\n          segmentData[i] = channelData[startSample + i];\n        }\n      }\n\n      // Convert the audio buffer to a blob\n      const offlineContext = new OfflineAudioContext(segmentBuffer.numberOfChannels, segmentBuffer.length, segmentBuffer.sampleRate);\n      const source = offlineContext.createBufferSource();\n      source.buffer = segmentBuffer;\n      source.connect(offlineContext.destination);\n      source.start();\n      const renderedBuffer = await offlineContext.startRendering();\n\n      // Convert to WAV format (MP3 encoding is not supported in browsers)\n      const wavBlob = audioBufferToWav(renderedBuffer);\n      const ringtoneFile = new File([wavBlob], `ringtone_${Date.now()}.wav`, {\n        type: 'audio/wav'\n      });\n      const ringtoneUrl = URL.createObjectURL(wavBlob);\n      const ringtone = {\n        id: Date.now().toString(),\n        name: `Ringtone_${audioFile.name}`,\n        url: ringtoneUrl,\n        duration: endTime - startTime,\n        file: ringtoneFile,\n        type: 'ringtone',\n        startTime,\n        endTime\n      };\n      onRingtoneCreated(ringtone);\n\n      // Save ringtone to backend\n      try {\n        console.log('🔄 Sending ringtone to backend...');\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\n        console.log('📥 Received response from backend:', saveResult);\n        console.log('📥 Response type:', typeof saveResult);\n        console.log('📥 Response keys:', Object.keys(saveResult));\n        if (saveResult.success) {\n          var _saveResult$format, _saveResult$format2;\n          console.log('🎵 SUCCESS: Ringtone created and saved to backend successfully!');\n          console.log('📁 Filename:', saveResult.filename);\n          console.log('📁 File path:', saveResult.file_path);\n          console.log('📁 Format:', saveResult.format);\n          console.log('📁 Folder:', saveResult.folder);\n          if (saveResult.mp3_available) {\n            console.log('🎵 MP3 version also available!');\n            console.log('📁 MP3 filename:', saveResult.mp3_filename);\n            console.log('📁 MP3 path:', saveResult.mp3_path);\n          }\n\n          // Show success message to user\n          setError(null);\n          let successMessage = `🎵 SUCCESS: Ringtone created successfully!\\n\\n📁 ${(_saveResult$format = saveResult.format) === null || _saveResult$format === void 0 ? void 0 : _saveResult$format.toUpperCase()} format saved to: ${saveResult.folder}\\n📁 ${(_saveResult$format2 = saveResult.format) === null || _saveResult$format2 === void 0 ? void 0 : _saveResult$format2.toUpperCase()} filename: ${saveResult.filename}`;\n          if (saveResult.mp3_available) {\n            successMessage += `\\n\\n🎵 MP3 format also created successfully!\\n📁 MP3 saved to: mp3_ringtones\\n📁 MP3 filename: ${saveResult.mp3_filename}\\n\\n✅ Both WAV and MP3 formats are now available!`;\n          } else {\n            var _saveResult$format3;\n            successMessage += `\\n\\n⚠️ MP3 version creation failed or skipped\\n💡 Only ${(_saveResult$format3 = saveResult.format) === null || _saveResult$format3 === void 0 ? void 0 : _saveResult$format3.toUpperCase()} format was created`;\n          }\n          setSuccessMessage(successMessage);\n\n          // Auto-hide success message after 10 seconds\n          setTimeout(() => {\n            setSuccessMessage(null);\n          }, 10000);\n        } else {\n          console.error('Failed to save ringtone to backend:', saveResult.error);\n          setError(`Ringtone created but failed to save to backend: ${saveResult.error}`);\n        }\n      } catch (saveError) {\n        console.error('Error saving ringtone to backend:', saveError);\n        setError(`Ringtone created but failed to save to backend: ${saveError}`);\n      }\n      setError(null);\n    } catch (error) {\n      console.error('Error creating ringtone:', error);\n      setError(`Error creating ringtone: ${error}`);\n    } finally {\n      setIsCreatingRingtone(false);\n    }\n  }, [startTime, endTime, audioFile, onRingtoneCreated]);\n\n  // Helper function to convert AudioBuffer to WAV format\n  const audioBufferToWav = buffer => {\n    const numChannels = buffer.numberOfChannels;\n    const sampleRate = buffer.sampleRate;\n    const length = buffer.length;\n\n    // WAV file header\n    const arrayBuffer = new ArrayBuffer(44 + length * numChannels * 2);\n    const view = new DataView(arrayBuffer);\n\n    // RIFF chunk descriptor\n    const writeString = (offset, string) => {\n      for (let i = 0; i < string.length; i++) {\n        view.setUint8(offset + i, string.charCodeAt(i));\n      }\n    };\n    writeString(0, 'RIFF');\n    view.setUint32(4, 36 + length * numChannels * 2, true);\n    writeString(8, 'WAVE');\n\n    // fmt sub-chunk\n    writeString(12, 'fmt ');\n    view.setUint32(16, 16, true);\n    view.setUint16(20, 1, true);\n    view.setUint16(22, numChannels, true);\n    view.setUint32(24, sampleRate, true);\n    view.setUint32(28, sampleRate * numChannels * 2, true);\n    view.setUint16(32, numChannels * 2, true);\n    view.setUint16(34, 16, true);\n\n    // data sub-chunk\n    writeString(36, 'data');\n    view.setUint32(40, length * numChannels * 2, true);\n\n    // Write audio data\n    let offset = 44;\n    for (let i = 0; i < length; i++) {\n      for (let channel = 0; channel < numChannels; channel++) {\n        const sample = Math.max(-1, Math.min(1, buffer.getChannelData(channel)[i]));\n        view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);\n        offset += 2;\n      }\n    }\n    return new Blob([arrayBuffer], {\n      type: 'audio/wav'\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"audio-player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"audio-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: audioFile.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 319,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Duration: \", formatTime(duration)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 318,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      ref: audioRef,\n      src: audioFile.url,\n      preload: \"metadata\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 323,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        className: `play-button ${isPlaying ? 'playing' : ''}`,\n        onClick: togglePlayPause,\n        children: isPlaying ? '⏸️ Pause' : '▶️ Play'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 326,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"progress-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          ref: progressRef,\n          className: \"progress-bar\",\n          onClick: handleSeek,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-fill\",\n            style: {\n              width: `${currentTime / duration * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"progress-handle\",\n            style: {\n              left: `${currentTime / duration * 100}%`\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 334,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-display\",\n          children: [formatTime(currentTime), \" / \", formatTime(duration)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 333,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"volume-control\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"Volume:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0\",\n          max: \"1\",\n          step: \"0.1\",\n          value: volume,\n          onChange: handleVolumeChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 355,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          children: [Math.round(volume * 100), \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 363,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 325,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ringtone-editor\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Create Ringtone\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 368,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"time-inputs\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"Start Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 371,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: duration,\n              step: \"0.1\",\n              value: startTime,\n              onChange: e => setStartTime(parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 373,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatTime(startTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 381,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"pin-time-btn\",\n              onClick: pinStartTime,\n              title: \"Pin current playing time as start time\",\n              children: \"\\uD83D\\uDCCC Pin Current Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 382,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 372,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 370,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"time-input\",\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            children: \"End Time:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"time-controls\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"range\",\n              min: \"0\",\n              max: duration,\n              step: \"0.1\",\n              value: endTime,\n              onChange: e => setEndTime(parseFloat(e.target.value))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 395,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              children: formatTime(endTime)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 403,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"pin-time-btn\",\n              onClick: pinEndTime,\n              title: \"Pin current playing time as end time\",\n              children: \"\\uD83D\\uDCCC Pin Current Time\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 404,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 394,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"ringtone-preview\",\n        children: /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Ringtone Length: \", formatTime(endTime - startTime)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 416,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 415,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"create-ringtone-btn\",\n        onClick: createRingtone,\n        disabled: startTime >= endTime || isCreatingRingtone,\n        children: isCreatingRingtone ? '⏳ Creating...' : '✂️ Create Ringtone'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 419,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"\\u274C \", error]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setError(null),\n        children: \"Dismiss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 431,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 429,\n      columnNumber: 9\n    }, this), successMessage && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"success-message\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        style: {\n          whiteSpace: 'pre-line'\n        },\n        children: successMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 437,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setSuccessMessage(null),\n        children: \"Dismiss\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 438,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 436,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 317,\n    columnNumber: 5\n  }, this);\n};\n_s(AudioPlayer, \"rHRvkh0NQfg5ppba0oqxsIFp9Rs=\");\n_c = AudioPlayer;\nexport default AudioPlayer;\nvar _c;\n$RefreshReg$(_c, \"AudioPlayer\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useCallback","ringtoneService","jsxDEV","_jsxDEV","AudioPlayer","audioFile","onRingtoneCreated","_s","isPlaying","setIsPlaying","currentTime","setCurrentTime","duration","setDuration","volume","setVolume","startTime","setStartTime","endTime","setEndTime","error","setError","isCreatingRingtone","setIsCreatingRingtone","successMessage","setSuccessMessage","audioRef","progressRef","audioContextRef","current","audio","updateTime","handleEnded","handleError","e","console","addEventListener","removeEventListener","togglePlayPause","pause","play","handleSeek","rect","getBoundingClientRect","clickX","clientX","left","percentage","width","newTime","handleVolumeChange","newVolume","parseFloat","target","value","formatTime","time","minutes","Math","floor","seconds","toString","padStart","pinStartTime","pinEndTime","createRingtone","Error","window","AudioContext","webkitAudioContext","audioContext","response","fetch","url","arrayBuffer","audioBuffer","decodeAudioData","sampleRate","startSample","endSample","segmentLength","segmentBuffer","createBuffer","numberOfChannels","channel","channelData","getChannelData","segmentData","i","offlineContext","OfflineAudioContext","length","source","createBufferSource","buffer","connect","destination","start","renderedBuffer","startRendering","wavBlob","audioBufferToWav","ringtoneFile","File","Date","now","type","ringtoneUrl","URL","createObjectURL","ringtone","id","name","file","log","saveResult","saveRingtone","Object","keys","success","_saveResult$format","_saveResult$format2","filename","file_path","format","folder","mp3_available","mp3_filename","mp3_path","toUpperCase","_saveResult$format3","setTimeout","saveError","numChannels","ArrayBuffer","view","DataView","writeString","offset","string","setUint8","charCodeAt","setUint32","setUint16","sample","max","min","setInt16","Blob","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","src","preload","onClick","style","step","onChange","round","title","disabled","whiteSpace","_c","$RefreshReg$"],"sources":["C:/devops/schedule_ringtone/src/components/AudioPlayer.tsx"],"sourcesContent":["// Rules applied\r\nimport React, { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { AudioFile } from '../types/audio';\r\nimport ringtoneService from '../services/ringtoneService';\r\n\r\ninterface AudioPlayerProps {\r\n  audioFile: AudioFile;\r\n  onRingtoneCreated: (ringtone: AudioFile) => void;\r\n}\r\n\r\nconst AudioPlayer: React.FC<AudioPlayerProps> = ({ audioFile, onRingtoneCreated }) => {\r\n  const [isPlaying, setIsPlaying] = useState(false);\r\n  const [currentTime, setCurrentTime] = useState(0);\r\n  const [duration, setDuration] = useState(0);\r\n  const [volume, setVolume] = useState(1);\r\n  const [startTime, setStartTime] = useState(0);\r\n  const [endTime, setEndTime] = useState(0);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isCreatingRingtone, setIsCreatingRingtone] = useState(false);\r\n  const [successMessage, setSuccessMessage] = useState<string | null>(null);\r\n  \r\n  const audioRef = useRef<HTMLAudioElement>(null);\r\n  const progressRef = useRef<HTMLDivElement>(null);\r\n  const audioContextRef = useRef<AudioContext | null>(null);\r\n\r\n  useEffect(() => {\r\n    if (audioRef.current) {\r\n      setDuration(audioFile.duration);\r\n      setEndTime(audioFile.duration);\r\n    }\r\n  }, [audioFile]);\r\n\r\n  useEffect(() => {\r\n    const audio = audioRef.current;\r\n    if (!audio) return;\r\n\r\n    const updateTime = () => setCurrentTime(audio.currentTime);\r\n    const handleEnded = () => setIsPlaying(false);\r\n    const handleError = (e: Event) => {\r\n      console.error('Audio error:', e);\r\n      setError('Error playing audio file');\r\n    };\r\n\r\n    audio.addEventListener('timeupdate', updateTime);\r\n    audio.addEventListener('ended', handleEnded);\r\n    audio.addEventListener('error', handleError);\r\n\r\n    return () => {\r\n      audio.removeEventListener('timeupdate', updateTime);\r\n      audio.removeEventListener('ended', handleEnded);\r\n      audio.removeEventListener('error', handleError);\r\n    };\r\n  }, []);\r\n\r\n  const togglePlayPause = useCallback(() => {\r\n    try {\r\n      if (!audioRef.current) return;\r\n\r\n      if (isPlaying) {\r\n        audioRef.current.pause();\r\n        setIsPlaying(false);\r\n      } else {\r\n        audioRef.current.play();\r\n        setIsPlaying(true);\r\n      }\r\n    } catch (error) {\r\n      console.error('Error toggling play/pause:', error);\r\n      setError(`Play/Pause error: ${error}`);\r\n    }\r\n  }, [isPlaying]);\r\n\r\n  const handleSeek = useCallback((e: React.MouseEvent<HTMLDivElement>) => {\r\n    try {\r\n      if (!audioRef.current || !progressRef.current) return;\r\n\r\n      const rect = progressRef.current.getBoundingClientRect();\r\n      const clickX = e.clientX - rect.left;\r\n      const percentage = clickX / rect.width;\r\n      const newTime = percentage * duration;\r\n      \r\n      audioRef.current.currentTime = newTime;\r\n      setCurrentTime(newTime);\r\n    } catch (error) {\r\n      console.error('Error seeking:', error);\r\n      setError(`Seek error: ${error}`);\r\n    }\r\n  }, [duration]);\r\n\r\n  const handleVolumeChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\r\n    try {\r\n      const newVolume = parseFloat(e.target.value);\r\n      setVolume(newVolume);\r\n      if (audioRef.current) {\r\n        audioRef.current.volume = newVolume;\r\n      }\r\n    } catch (error) {\r\n      console.error('Error changing volume:', error);\r\n      setError(`Volume error: ${error}`);\r\n    }\r\n  }, []);\r\n\r\n  const formatTime = useCallback((time: number) => {\r\n    const minutes = Math.floor(time / 60);\r\n    const seconds = Math.floor(time % 60);\r\n    return `${minutes}:${seconds.toString().padStart(2, '0')}`;\r\n  }, []);\r\n\r\n  const pinStartTime = useCallback(() => {\r\n    try {\r\n      setStartTime(currentTime);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Error pinning start time:', error);\r\n      setError(`Error pinning start time: ${error}`);\r\n    }\r\n  }, [currentTime]);\r\n\r\n  const pinEndTime = useCallback(() => {\r\n    try {\r\n      setEndTime(currentTime);\r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Error pinning end time:', error);\r\n      setError(`Error pinning end time: ${error}`);\r\n    }\r\n  }, [currentTime]);\r\n\r\n  const createRingtone = useCallback(async () => {\r\n    try {\r\n      if (startTime >= endTime) {\r\n        throw new Error('Start time must be before end time');\r\n      }\r\n\r\n      if (endTime - startTime < 1) {\r\n        throw new Error('Ringtone must be at least 1 second long');\r\n      }\r\n\r\n      // Removed 30-second limit - ringtones can now be any length\r\n\r\n      setIsCreatingRingtone(true);\r\n      setError(null);\r\n\r\n      // Create AudioContext if not exists\r\n      if (!audioContextRef.current) {\r\n        audioContextRef.current = new (window.AudioContext || (window as any).webkitAudioContext)();\r\n      }\r\n\r\n      const audioContext = audioContextRef.current;\r\n      \r\n      // Fetch the audio file\r\n      const response = await fetch(audioFile.url);\r\n      const arrayBuffer = await response.arrayBuffer();\r\n      \r\n      // Decode the audio data\r\n      const audioBuffer = await audioContext.decodeAudioData(arrayBuffer);\r\n      \r\n      // Calculate the sample positions\r\n      const sampleRate = audioBuffer.sampleRate;\r\n      const startSample = Math.floor(startTime * sampleRate);\r\n      const endSample = Math.floor(endTime * sampleRate);\r\n      const segmentLength = endSample - startSample;\r\n      \r\n      // Create a new audio buffer for the segment\r\n      const segmentBuffer = audioContext.createBuffer(\r\n        audioBuffer.numberOfChannels,\r\n        segmentLength,\r\n        sampleRate\r\n      );\r\n      \r\n      // Copy the audio data for each channel\r\n      for (let channel = 0; channel < audioBuffer.numberOfChannels; channel++) {\r\n        const channelData = audioBuffer.getChannelData(channel);\r\n        const segmentData = segmentBuffer.getChannelData(channel);\r\n        \r\n        for (let i = 0; i < segmentLength; i++) {\r\n          segmentData[i] = channelData[startSample + i];\r\n        }\r\n      }\r\n      \r\n      // Convert the audio buffer to a blob\r\n      const offlineContext = new OfflineAudioContext(\r\n        segmentBuffer.numberOfChannels,\r\n        segmentBuffer.length,\r\n        segmentBuffer.sampleRate\r\n      );\r\n      \r\n      const source = offlineContext.createBufferSource();\r\n      source.buffer = segmentBuffer;\r\n      source.connect(offlineContext.destination);\r\n      source.start();\r\n      \r\n      const renderedBuffer = await offlineContext.startRendering();\r\n      \r\n      // Convert to WAV format (MP3 encoding is not supported in browsers)\r\n      const wavBlob = audioBufferToWav(renderedBuffer);\r\n      const ringtoneFile = new File([wavBlob], `ringtone_${Date.now()}.wav`, { type: 'audio/wav' });\r\n      const ringtoneUrl = URL.createObjectURL(wavBlob);\r\n\r\n      const ringtone: AudioFile = {\r\n        id: Date.now().toString(),\r\n        name: `Ringtone_${audioFile.name}`,\r\n        url: ringtoneUrl,\r\n        duration: endTime - startTime,\r\n        file: ringtoneFile,\r\n        type: 'ringtone',\r\n        startTime,\r\n        endTime\r\n      };\r\n\r\n      onRingtoneCreated(ringtone);\r\n      \r\n             // Save ringtone to backend\r\n       try {\r\n         console.log('🔄 Sending ringtone to backend...');\r\n         const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n         console.log('📥 Received response from backend:', saveResult);\r\n         console.log('📥 Response type:', typeof saveResult);\r\n         console.log('📥 Response keys:', Object.keys(saveResult));\r\n         \r\n         if (saveResult.success) {\r\n           console.log('🎵 SUCCESS: Ringtone created and saved to backend successfully!');\r\n           console.log('📁 Filename:', saveResult.filename);\r\n           console.log('📁 File path:', saveResult.file_path);\r\n           console.log('📁 Format:', saveResult.format);\r\n           console.log('📁 Folder:', saveResult.folder);\r\n           \r\n           if (saveResult.mp3_available) {\r\n             console.log('🎵 MP3 version also available!');\r\n             console.log('📁 MP3 filename:', saveResult.mp3_filename);\r\n             console.log('📁 MP3 path:', saveResult.mp3_path);\r\n           }\r\n           \r\n           // Show success message to user\r\n           setError(null);\r\n           \r\n           let successMessage = `🎵 SUCCESS: Ringtone created successfully!\\n\\n📁 ${saveResult.format?.toUpperCase()} format saved to: ${saveResult.folder}\\n📁 ${saveResult.format?.toUpperCase()} filename: ${saveResult.filename}`;\r\n           \r\n           if (saveResult.mp3_available) {\r\n             successMessage += `\\n\\n🎵 MP3 format also created successfully!\\n📁 MP3 saved to: mp3_ringtones\\n📁 MP3 filename: ${saveResult.mp3_filename}\\n\\n✅ Both WAV and MP3 formats are now available!`;\r\n           } else {\r\n             successMessage += `\\n\\n⚠️ MP3 version creation failed or skipped\\n💡 Only ${saveResult.format?.toUpperCase()} format was created`;\r\n           }\r\n           \r\n           setSuccessMessage(successMessage);\r\n          \r\n          // Auto-hide success message after 10 seconds\r\n          setTimeout(() => {\r\n            setSuccessMessage(null);\r\n          }, 10000);\r\n        } else {\r\n          console.error('Failed to save ringtone to backend:', saveResult.error);\r\n          setError(`Ringtone created but failed to save to backend: ${saveResult.error}`);\r\n        }\r\n      } catch (saveError) {\r\n        console.error('Error saving ringtone to backend:', saveError);\r\n        setError(`Ringtone created but failed to save to backend: ${saveError}`);\r\n      }\r\n      \r\n      setError(null);\r\n    } catch (error) {\r\n      console.error('Error creating ringtone:', error);\r\n      setError(`Error creating ringtone: ${error}`);\r\n    } finally {\r\n      setIsCreatingRingtone(false);\r\n    }\r\n  }, [startTime, endTime, audioFile, onRingtoneCreated]);\r\n\r\n  // Helper function to convert AudioBuffer to WAV format\r\n  const audioBufferToWav = (buffer: AudioBuffer): Blob => {\r\n    const numChannels = buffer.numberOfChannels;\r\n    const sampleRate = buffer.sampleRate;\r\n    const length = buffer.length;\r\n    \r\n    // WAV file header\r\n    const arrayBuffer = new ArrayBuffer(44 + length * numChannels * 2);\r\n    const view = new DataView(arrayBuffer);\r\n    \r\n    // RIFF chunk descriptor\r\n    const writeString = (offset: number, string: string) => {\r\n      for (let i = 0; i < string.length; i++) {\r\n        view.setUint8(offset + i, string.charCodeAt(i));\r\n      }\r\n    };\r\n    \r\n    writeString(0, 'RIFF');\r\n    view.setUint32(4, 36 + length * numChannels * 2, true);\r\n    writeString(8, 'WAVE');\r\n    \r\n    // fmt sub-chunk\r\n    writeString(12, 'fmt ');\r\n    view.setUint32(16, 16, true);\r\n    view.setUint16(20, 1, true);\r\n    view.setUint16(22, numChannels, true);\r\n    view.setUint32(24, sampleRate, true);\r\n    view.setUint32(28, sampleRate * numChannels * 2, true);\r\n    view.setUint16(32, numChannels * 2, true);\r\n    view.setUint16(34, 16, true);\r\n    \r\n    // data sub-chunk\r\n    writeString(36, 'data');\r\n    view.setUint32(40, length * numChannels * 2, true);\r\n    \r\n    // Write audio data\r\n    let offset = 44;\r\n    for (let i = 0; i < length; i++) {\r\n      for (let channel = 0; channel < numChannels; channel++) {\r\n        const sample = Math.max(-1, Math.min(1, buffer.getChannelData(channel)[i]));\r\n        view.setInt16(offset, sample < 0 ? sample * 0x8000 : sample * 0x7FFF, true);\r\n        offset += 2;\r\n      }\r\n    }\r\n    \r\n    return new Blob([arrayBuffer], { type: 'audio/wav' });\r\n  };\r\n\r\n  return (\r\n    <div className=\"audio-player\">\r\n      <div className=\"audio-info\">\r\n        <h3>{audioFile.name}</h3>\r\n        <p>Duration: {formatTime(duration)}</p>\r\n      </div>\r\n\r\n      <audio ref={audioRef} src={audioFile.url} preload=\"metadata\" />\r\n\r\n      <div className=\"controls\">\r\n        <button \r\n          className={`play-button ${isPlaying ? 'playing' : ''}`}\r\n          onClick={togglePlayPause}\r\n        >\r\n          {isPlaying ? '⏸️ Pause' : '▶️ Play'}\r\n        </button>\r\n\r\n        <div className=\"progress-container\">\r\n          <div \r\n            ref={progressRef}\r\n            className=\"progress-bar\"\r\n            onClick={handleSeek}\r\n          >\r\n            <div \r\n              className=\"progress-fill\"\r\n              style={{ width: `${(currentTime / duration) * 100}%` }}\r\n            />\r\n            <div \r\n              className=\"progress-handle\"\r\n              style={{ left: `${(currentTime / duration) * 100}%` }}\r\n            />\r\n          </div>\r\n          <div className=\"time-display\">\r\n            {formatTime(currentTime)} / {formatTime(duration)}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"volume-control\">\r\n          <label>Volume:</label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"0\"\r\n            max=\"1\"\r\n            step=\"0.1\"\r\n            value={volume}\r\n            onChange={handleVolumeChange}\r\n          />\r\n          <span>{Math.round(volume * 100)}%</span>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"ringtone-editor\">\r\n        <h4>Create Ringtone</h4>\r\n        <div className=\"time-inputs\">\r\n          <div className=\"time-input\">\r\n            <label>Start Time:</label>\r\n            <div className=\"time-controls\">\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max={duration}\r\n                step=\"0.1\"\r\n                value={startTime}\r\n                onChange={(e) => setStartTime(parseFloat(e.target.value))}\r\n              />\r\n              <span>{formatTime(startTime)}</span>\r\n              <button \r\n                className=\"pin-time-btn\"\r\n                onClick={pinStartTime}\r\n                title=\"Pin current playing time as start time\"\r\n              >\r\n                📌 Pin Current Time\r\n              </button>\r\n            </div>\r\n          </div>\r\n          \r\n          <div className=\"time-input\">\r\n            <label>End Time:</label>\r\n            <div className=\"time-controls\">\r\n              <input\r\n                type=\"range\"\r\n                min=\"0\"\r\n                max={duration}\r\n                step=\"0.1\"\r\n                value={endTime}\r\n                onChange={(e) => setEndTime(parseFloat(e.target.value))}\r\n              />\r\n              <span>{formatTime(endTime)}</span>\r\n              <button \r\n                className=\"pin-time-btn\"\r\n                onClick={pinEndTime}\r\n                title=\"Pin current playing time as end time\"\r\n              >\r\n                📌 Pin Current Time\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n        \r\n        <div className=\"ringtone-preview\">\r\n          <p>Ringtone Length: {formatTime(endTime - startTime)}</p>\r\n        </div>\r\n        \r\n        <button \r\n          className=\"create-ringtone-btn\"\r\n          onClick={createRingtone}\r\n          disabled={startTime >= endTime || isCreatingRingtone}\r\n        >\r\n          {isCreatingRingtone ? '⏳ Creating...' : '✂️ Create Ringtone'}\r\n        </button>\r\n      </div>\r\n\r\n      {error && (\r\n        <div className=\"error-message\">\r\n          <p>❌ {error}</p>\r\n          <button onClick={() => setError(null)}>Dismiss</button>\r\n        </div>\r\n      )}\r\n      \r\n      {successMessage && (\r\n        <div className=\"success-message\">\r\n          <p style={{ whiteSpace: 'pre-line' }}>{successMessage}</p>\r\n          <button onClick={() => setSuccessMessage(null)}>Dismiss</button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AudioPlayer;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}