{"ast":null,"code":"var _ScheduleService;\n// Rules applied\n\nimport { ringtoneService } from './ringtoneService';\n\n// Rules applied\n// Dynamic API URL based on current host\nconst getApiBaseUrl = () => {\n  const protocol = window.location.protocol;\n  const hostname = window.location.hostname;\n  const port = '5000'; // Backend port\n\n  // If accessing via localhost, use localhost for API\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\n    return `${protocol}//${hostname}:${port}`;\n  }\n\n  // For network access, use the same hostname but port 5000\n  return `${protocol}//${hostname}:${port}`;\n};\nconst API_BASE_URL = getApiBaseUrl();\n\n// Rules applied\n// Use a shared storage key that works across different origins\n// This allows schedule data to be shared between localhost and network access\nconst STORAGE_KEY = 'ringtone-scheduler-schedules';\nexport class ScheduleService {\n  constructor() {\n    this.scheduledRingtones = [];\n    this.checkInterval = null;\n    this.audioElement = null;\n    this.initializeService();\n  }\n  async initializeService() {\n    await this.loadFromStorage();\n    this.startScheduleChecker();\n  }\n  static getInstance() {\n    if (!ScheduleService.instance) {\n      ScheduleService.instance = new ScheduleService();\n    }\n    return ScheduleService.instance;\n  }\n\n  // Load scheduled ringtones from localStorage and sync with backend\n  async loadFromStorage() {\n    try {\n      // First, try to load from backend (for cross-origin sync)\n      await this.loadFromBackend();\n\n      // Fallback to localStorage if backend fails\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored && this.scheduledRingtones.length === 0) {\n        this.scheduledRingtones = JSON.parse(stored);\n        console.log('üìÖ Loaded scheduled ringtones from localStorage fallback:', this.scheduledRingtones.length);\n\n        // Sync localStorage data to backend\n        await this.syncToBackend();\n      }\n    } catch (error) {\n      console.error('‚ùå Error loading scheduled ringtones:', error);\n      this.scheduledRingtones = [];\n    }\n  }\n\n  // Load schedule data from backend\n  async loadFromBackend() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/schedules`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const result = await response.json();\n        if (result.success && result.schedules) {\n          this.scheduledRingtones = result.schedules;\n          console.log('üìÖ Loaded scheduled ringtones from backend:', this.scheduledRingtones.length);\n\n          // Update localStorage with backend data\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(this.scheduledRingtones));\n        }\n      } else {\n        console.warn('‚ö†Ô∏è Failed to load schedules from backend, using localStorage');\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Backend schedule loading failed, using localStorage:', error);\n    }\n  }\n\n  // Sync current data to backend\n  async syncToBackend() {\n    try {\n      for (const schedule of this.scheduledRingtones) {\n        await this.saveScheduleToBackend(schedule);\n      }\n      console.log('üîÑ Synced localStorage data to backend');\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Failed to sync to backend:', error);\n    }\n  }\n\n  // Save individual schedule to backend\n  async saveScheduleToBackend(schedule) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/schedules`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(schedule)\n      });\n      if (!response.ok) {\n        console.warn('‚ö†Ô∏è Failed to save schedule to backend:', schedule.id);\n      }\n    } catch (error) {\n      console.warn('‚ö†Ô∏è Error saving schedule to backend:', error);\n    }\n  }\n\n  // Save scheduled ringtones to localStorage and backend\n  async saveToStorage() {\n    try {\n      // Save to localStorage\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.scheduledRingtones));\n      console.log('üíæ Saved scheduled ringtones to localStorage');\n\n      // Also save to backend for cross-origin sync\n      await this.syncToBackend();\n    } catch (error) {\n      console.error('‚ùå Error saving scheduled ringtones:', error);\n    }\n  }\n\n  // Create a new scheduled ringtone\n  async createSchedule(ringtone, formData) {\n    try {\n      console.log('üöÄ Starting schedule creation process...');\n      console.log('üìã Schedule data:', {\n        ringtone: ringtone.name,\n        time: formData.time,\n        days: formData.days\n      });\n      let ringtoneFilePath;\n\n      // Check if this is a backend ringtone (already has a file path)\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\n        console.log('üìÅ This is a backend ringtone, using file path from backend...');\n        if (ringtone.filePath) {\n          // Use the file path provided by the backend\n          ringtoneFilePath = ringtone.filePath;\n          console.log('‚úÖ Using file path from backend:', ringtoneFilePath);\n        } else {\n          // Fallback: extract the file path from the URL\n          console.log('‚ö†Ô∏è No file path provided, extracting from URL...');\n          const urlParts = ringtone.url.split('/');\n          const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\n          const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\n\n          // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\n          let preferredFolder = folder;\n          let preferredFilename = filename;\n          if (folder === 'mp3_ringtones') {\n            // Try to find the corresponding WAV file\n            const wavFilename = filename.replace('.mp3', '.wav');\n            preferredFolder = 'wav_ringtones';\n            preferredFilename = wavFilename;\n            console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\n          }\n\n          // Construct the file path using the preferred format\n          ringtoneFilePath = `portable_app/backend/ringtones/${preferredFolder}/${preferredFilename}`;\n          console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\n        }\n      } else {\n        // This is a local ringtone, save it to get the file path\n        console.log('üíæ Saving local ringtone to get file path...');\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\n        if (!saveResult.success) {\n          throw new Error(`Failed to save ringtone: ${saveResult.error || 'Unknown error'}`);\n        }\n        ringtoneFilePath = saveResult.file_path;\n        console.log('‚úÖ Local ringtone saved successfully:', ringtoneFilePath);\n      }\n      const newSchedule = {\n        id: `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        ringtoneId: ringtone.id,\n        ringtoneName: ringtone.name,\n        ringtoneUrl: ringtone.url,\n        ringtoneFilePath: ringtoneFilePath,\n        // Store the actual file path\n        time: formData.time,\n        days: formData.days,\n        isActive: true,\n        scheduleSource: formData.scheduleSource,\n        // Store the scheduling method\n        createdAt: new Date().toISOString()\n      };\n      console.log('üìù Created schedule object:', newSchedule);\n\n      // Create Windows Task Scheduler task only if schedule source is 'device'\n      if (formData.scheduleSource === 'device') {\n        console.log('üîÑ Schedule source is device, checking Windows Task Scheduler availability...');\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\n        if (taskSchedulerAvailable) {\n          console.log('‚úÖ Windows Task Scheduler is available, creating task...');\n          try {\n            await this.createWindowsTask(newSchedule);\n            console.log('‚úÖ Windows Task Scheduler task created successfully');\n          } catch (taskError) {\n            console.warn('‚ö†Ô∏è Failed to create Windows Task Scheduler task, but continuing with local schedule:', taskError);\n          }\n        } else {\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, creating local schedule only');\n        }\n      } else {\n        console.log('‚ÑπÔ∏è Schedule source is web, creating browser-based schedule only');\n      }\n      this.scheduledRingtones.push(newSchedule);\n      await this.saveToStorage();\n      console.log('‚úÖ Created new schedule with Windows Task:', newSchedule);\n      return newSchedule;\n    } catch (error) {\n      console.error('‚ùå Error creating schedule:', error);\n      throw error;\n    }\n  }\n\n  // Get all scheduled ringtones\n  getAllSchedules() {\n    return [...this.scheduledRingtones];\n  }\n\n  // Get active scheduled ringtones\n  getActiveSchedules() {\n    return this.scheduledRingtones.filter(schedule => schedule.isActive);\n  }\n\n  // Update a scheduled ringtone\n  async updateSchedule(id, updates) {\n    try {\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\n      if (index === -1) {\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\n        return false;\n      }\n      this.scheduledRingtones[index] = {\n        ...this.scheduledRingtones[index],\n        ...updates\n      };\n      await this.saveToStorage();\n      console.log('‚úÖ Updated schedule:', id);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error updating schedule:', error);\n      return false;\n    }\n  }\n\n  // Update a scheduled ringtone with form data\n  async updateScheduleWithFormData(id, ringtone, formData) {\n    try {\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\n      if (index === -1) {\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\n        return false;\n      }\n      const oldSchedule = this.scheduledRingtones[index];\n\n      // Delete old Windows task\n      await this.deleteWindowsTask(oldSchedule.id);\n      let ringtoneFilePath;\n\n      // Check if this is a backend ringtone (already has a file path)\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\n        console.log('üìÅ This is a backend ringtone, using file path from backend...');\n        if (ringtone.filePath) {\n          // Use the file path provided by the backend\n          ringtoneFilePath = ringtone.filePath;\n          console.log('‚úÖ Using file path from backend:', ringtoneFilePath);\n        } else {\n          // Fallback: extract the file path from the URL\n          console.log('‚ö†Ô∏è No file path provided, extracting from URL...');\n          const urlParts = ringtone.url.split('/');\n          const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\n          const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\n\n          // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\n          let preferredFolder = folder;\n          let preferredFilename = filename;\n          if (folder === 'mp3_ringtones') {\n            // Try to find the corresponding WAV file\n            const wavFilename = filename.replace('.mp3', '.wav');\n            preferredFolder = 'wav_ringtones';\n            preferredFilename = wavFilename;\n            console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\n          }\n\n          // Construct the file path using the preferred format\n          ringtoneFilePath = `portable_app/backend/ringtones/${preferredFolder}/${preferredFilename}`;\n          console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\n        }\n      } else {\n        // This is a local ringtone, save it to get the file path\n        console.log('üíæ Saving updated ringtone to get file path...');\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\n        if (!saveResult.success) {\n          throw new Error(`Failed to save updated ringtone: ${saveResult.error || 'Unknown error'}`);\n        }\n        ringtoneFilePath = saveResult.file_path;\n        console.log('‚úÖ Updated ringtone saved successfully:', ringtoneFilePath);\n      }\n      const updates = {\n        ringtoneId: ringtone.id,\n        ringtoneName: ringtone.name,\n        ringtoneUrl: ringtone.url,\n        ringtoneFilePath: ringtoneFilePath,\n        // Store the actual file path\n        time: formData.time,\n        days: formData.days,\n        scheduleSource: formData.scheduleSource // Update the scheduling method\n      };\n      const updatedSchedule = {\n        ...this.scheduledRingtones[index],\n        ...updates\n      };\n\n      // Create new Windows task only if schedule source is 'device'\n      if (formData.scheduleSource === 'device') {\n        await this.createWindowsTask(updatedSchedule);\n      }\n      this.scheduledRingtones[index] = updatedSchedule;\n      await this.saveToStorage();\n      console.log('‚úÖ Updated schedule with form data and Windows Task:', id);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error updating schedule with form data:', error);\n      return false;\n    }\n  }\n\n  // Delete a scheduled ringtone\n  async deleteSchedule(id) {\n    try {\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\n      if (index === -1) {\n        console.warn('‚ö†Ô∏è Schedule not found for deletion:', id);\n        return false;\n      }\n      const scheduleToDelete = this.scheduledRingtones[index];\n\n      // Try to delete Windows Task Scheduler task only for device-based schedules\n      if (scheduleToDelete.scheduleSource === 'device') {\n        try {\n          await this.deleteWindowsTask(id);\n          console.log('‚úÖ Deleted Windows Task Scheduler task:', id);\n        } catch (taskError) {\n          console.warn('‚ö†Ô∏è Failed to delete Windows Task Scheduler task, but continuing with local deletion:', taskError);\n          // Continue with local deletion even if Windows task deletion fails\n        }\n      } else {\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler task to delete');\n      }\n\n      // Always delete from local storage\n      this.scheduledRingtones.splice(index, 1);\n      await this.saveToStorage();\n      console.log('‚úÖ Deleted schedule:', id);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error deleting schedule:', error);\n      return false;\n    }\n  }\n\n  // Toggle schedule active status\n  async toggleSchedule(id) {\n    try {\n      const schedule = this.scheduledRingtones.find(s => s.id === id);\n      if (!schedule) {\n        console.warn('‚ö†Ô∏è Schedule not found for toggle:', id);\n        return false;\n      }\n      schedule.isActive = !schedule.isActive;\n\n      // Update Windows Task Scheduler task status only for device-based schedules\n      if (schedule.scheduleSource === 'device') {\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\n        if (taskSchedulerAvailable) {\n          try {\n            if (schedule.isActive) {\n              await this.enableWindowsTask(id);\n            } else {\n              await this.disableWindowsTask(id);\n            }\n          } catch (taskError) {\n            console.warn('‚ö†Ô∏è Failed to update Windows Task Scheduler task, but continuing with local update:', taskError);\n          }\n        } else {\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, updating local schedule only');\n        }\n      } else {\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler interaction needed');\n      }\n      await this.saveToStorage();\n      console.log('‚úÖ Toggled schedule and Windows Task:', id, 'Active:', schedule.isActive);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error toggling schedule:', error);\n      return false;\n    }\n  }\n\n  // Start the schedule checker\n  startScheduleChecker() {\n    // Check every minute\n    this.checkInterval = setInterval(() => {\n      this.checkSchedules();\n    }, 60000); // 60 seconds\n\n    console.log('‚è∞ Started schedule checker');\n  }\n\n  // Stop the schedule checker\n  stopScheduleChecker() {\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = null;\n      console.log('‚èπÔ∏è Stopped schedule checker');\n    }\n  }\n\n  // Check if any schedules should be triggered\n  checkSchedules() {\n    try {\n      const now = new Date();\n      const currentTime = now.toTimeString().slice(0, 5); // \"HH:MM\" format\n      const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n      const activeSchedules = this.getActiveSchedules();\n      for (const schedule of activeSchedules) {\n        // Check if it's the right time and day\n        if (schedule.time === currentTime && schedule.days.includes(currentDay)) {\n          // Check if we haven't played this schedule today\n          const today = now.toDateString();\n          const lastPlayed = schedule.lastPlayed ? new Date(schedule.lastPlayed).toDateString() : null;\n          if (lastPlayed !== today) {\n            this.playScheduledRingtone(schedule);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('‚ùå Error checking schedules:', error);\n    }\n  }\n\n  // Play a scheduled ringtone\n  async playScheduledRingtone(schedule) {\n    try {\n      console.log('üîî Playing scheduled ringtone:', schedule.ringtoneName);\n\n      // Create audio element if it doesn't exist\n      if (!this.audioElement) {\n        this.audioElement = new Audio();\n      }\n\n      // Set the audio source\n      this.audioElement.src = schedule.ringtoneUrl;\n      this.audioElement.volume = 1.0; // Full volume for scheduled ringtones\n\n      // Play the audio\n      await this.audioElement.play();\n\n      // Update last played time\n      this.updateSchedule(schedule.id, {\n        lastPlayed: new Date().toISOString()\n      });\n      console.log('‚úÖ Scheduled ringtone played successfully');\n    } catch (error) {\n      console.error('‚ùå Error playing scheduled ringtone:', error);\n    }\n  }\n\n  // Stop current audio\n  stopAudio() {\n    try {\n      if (this.audioElement) {\n        this.audioElement.pause();\n        this.audioElement.currentTime = 0;\n        console.log('‚èπÔ∏è Audio stopped');\n      }\n    } catch (error) {\n      console.error('‚ùå Error stopping audio:', error);\n    }\n  }\n\n  // Check if Windows Task Scheduler service is available\n  async isTaskSchedulerAvailable() {\n    try {\n      console.log('üîç Checking Windows Task Scheduler availability...');\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('üì° Task Scheduler status response:', response.status, response.statusText);\n      if (!response.ok) {\n        console.warn('‚ùå Task Scheduler status endpoint returned error:', response.status, response.statusText);\n        return false;\n      }\n      const result = await response.json();\n      console.log('üìã Task Scheduler status result:', result);\n      const isAvailable = result.success && result.available;\n      console.log('‚úÖ Task Scheduler available:', isAvailable);\n      return isAvailable;\n    } catch (error) {\n      console.error('‚ùå Error checking Windows Task Scheduler service:', error);\n      return false;\n    }\n  }\n\n  // Windows Task Scheduler integration methods\n  async createWindowsTask(schedule) {\n    try {\n      // Use the file path if available, otherwise fall back to URL\n      const ringtonePath = schedule.ringtoneFilePath || schedule.ringtoneUrl;\n      if (!schedule.ringtoneFilePath) {\n        console.warn('‚ö†Ô∏è No file path available for ringtone, using URL (may not work with Windows Task Scheduler)');\n      }\n      console.log('üîß Creating Windows Task with ringtone path:', ringtonePath);\n      console.log('üîß Schedule object:', schedule);\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: schedule.id,\n          ringtone_path: ringtonePath,\n          time: schedule.time,\n          days: schedule.days\n        })\n      });\n      const result = await response.json();\n      if (!result.success) {\n        console.error('‚ùå Windows Task Scheduler API error:', result);\n        throw new Error(result.error || 'Failed to create Windows task');\n      }\n      console.log('‚úÖ Created Windows Task Scheduler task:', schedule.id);\n    } catch (error) {\n      console.error('‚ùå Error creating Windows task:', error);\n      throw error;\n    }\n  }\n  async deleteWindowsTask(taskId) {\n    try {\n      console.log('üîÑ Attempting to delete Windows Task Scheduler task:', taskId);\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/delete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: taskId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to delete Windows task');\n      }\n      console.log('‚úÖ Deleted Windows Task Scheduler task:', taskId);\n    } catch (error) {\n      console.error('‚ùå Error deleting Windows task:', error);\n      throw error;\n    }\n  }\n  async enableWindowsTask(taskId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/enable`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: taskId\n        })\n      });\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to enable Windows task');\n      }\n      console.log('‚úÖ Enabled Windows Task Scheduler task:', taskId);\n    } catch (error) {\n      console.error('‚ùå Error enabling Windows task:', error);\n      throw error;\n    }\n  }\n  async disableWindowsTask(taskId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/disable`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: taskId\n        })\n      });\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to disable Windows task');\n      }\n      console.log('‚úÖ Disabled Windows Task Scheduler task:', taskId);\n    } catch (error) {\n      console.error('‚ùå Error disabling Windows task:', error);\n      throw error;\n    }\n  }\n\n  // Test ringtone playback using Windows Task Scheduler service or fallback\n  async testPlayRingtone(ringtone) {\n    try {\n      // Try Windows Task Scheduler service first\n      const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\n      if (taskSchedulerAvailable) {\n        try {\n          let ringtoneFilePath;\n\n          // Check if this is a backend ringtone (already has a file path)\n          if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\n            console.log('üìÅ This is a backend ringtone, using file path from backend...');\n            if (ringtone.filePath) {\n              // Use the file path provided by the backend\n              ringtoneFilePath = ringtone.filePath;\n              console.log('‚úÖ Using file path from backend:', ringtoneFilePath);\n            } else {\n              // Fallback: extract the file path from the URL\n              console.log('‚ö†Ô∏è No file path provided, extracting from URL...');\n              const urlParts = ringtone.url.split('/');\n              const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\n              const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\n\n              // Construct the file path\n              ringtoneFilePath = `portable_app/backend/ringtones/${folder}/${filename}`;\n              console.log('‚úÖ Extracted file path from backend URL:', ringtoneFilePath);\n            }\n          } else {\n            // This is a local ringtone, save it to get the file path\n            console.log('üíæ Saving ringtone for testing...');\n            const saveResult = await ringtoneService.saveRingtone(ringtone);\n            if (!saveResult.success) {\n              throw new Error(`Failed to save ringtone for testing: ${saveResult.error || 'Unknown error'}`);\n            }\n            ringtoneFilePath = saveResult.file_path;\n            console.log('‚úÖ Ringtone saved for testing:', ringtoneFilePath);\n          }\n          const response = await fetch(`${API_BASE_URL}/api/task-scheduler/test`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ringtone_path: ringtoneFilePath\n            })\n          });\n          const result = await response.json();\n          if (!result.success) {\n            throw new Error(result.error || 'Failed to test ringtone');\n          }\n          console.log('‚úÖ Tested ringtone via Windows Task Scheduler:', ringtone.name);\n          return;\n        } catch (taskError) {\n          console.warn('‚ö†Ô∏è Windows Task Scheduler test failed, falling back to browser audio:', taskError);\n        }\n      }\n\n      // Fallback to browser audio\n      console.log('üîÑ Using browser audio fallback for testing:', ringtone.name);\n      if (!this.audioElement) {\n        this.audioElement = new Audio();\n      }\n      this.audioElement.src = ringtone.url;\n      this.audioElement.volume = 0.5; // Lower volume for testing\n\n      await this.audioElement.play();\n      console.log('‚úÖ Test ringtone played successfully via browser audio');\n    } catch (error) {\n      console.error('‚ùå Error testing ringtone:', error);\n      throw error;\n    }\n  }\n\n  // Cleanup method\n  destroy() {\n    this.stopScheduleChecker();\n    this.stopAudio();\n    this.audioElement = null;\n  }\n}\n\n// Export singleton instance\n_ScheduleService = ScheduleService;\nScheduleService.instance = void 0;\nexport const scheduleService = ScheduleService.getInstance();","map":{"version":3,"names":["ringtoneService","getApiBaseUrl","protocol","window","location","hostname","port","API_BASE_URL","STORAGE_KEY","ScheduleService","constructor","scheduledRingtones","checkInterval","audioElement","initializeService","loadFromStorage","startScheduleChecker","getInstance","instance","loadFromBackend","stored","localStorage","getItem","length","JSON","parse","console","log","syncToBackend","error","response","fetch","method","headers","ok","result","json","success","schedules","setItem","stringify","warn","schedule","saveScheduleToBackend","body","id","saveToStorage","createSchedule","ringtone","formData","name","time","days","ringtoneFilePath","url","startsWith","filePath","urlParts","split","folder","filename","preferredFolder","preferredFilename","wavFilename","replace","saveResult","saveRingtone","Error","file_path","newSchedule","Date","now","Math","random","toString","substr","ringtoneId","ringtoneName","ringtoneUrl","isActive","scheduleSource","createdAt","toISOString","taskSchedulerAvailable","isTaskSchedulerAvailable","createWindowsTask","taskError","push","getAllSchedules","getActiveSchedules","filter","updateSchedule","updates","index","findIndex","updateScheduleWithFormData","oldSchedule","deleteWindowsTask","updatedSchedule","deleteSchedule","scheduleToDelete","splice","toggleSchedule","find","s","enableWindowsTask","disableWindowsTask","setInterval","checkSchedules","stopScheduleChecker","clearInterval","currentTime","toTimeString","slice","currentDay","getDay","activeSchedules","includes","today","toDateString","lastPlayed","playScheduledRingtone","Audio","src","volume","play","stopAudio","pause","status","statusText","isAvailable","available","ringtonePath","task_name","ringtone_path","taskId","testPlayRingtone","destroy","_ScheduleService","scheduleService"],"sources":["C:/devops/schedule_ringtone_portable/src/services/scheduleService.ts"],"sourcesContent":["// Rules applied\r\nimport { ScheduledRingtone, ScheduleFormData } from '../types/schedule';\r\nimport { AudioFile } from '../types/audio';\r\nimport { ringtoneService } from './ringtoneService';\r\n\r\n// Rules applied\r\n// Dynamic API URL based on current host\r\nconst getApiBaseUrl = (): string => {\r\n  const protocol = window.location.protocol;\r\n  const hostname = window.location.hostname;\r\n  const port = '5000'; // Backend port\r\n  \r\n  // If accessing via localhost, use localhost for API\r\n  if (hostname === 'localhost' || hostname === '127.0.0.1') {\r\n    return `${protocol}//${hostname}:${port}`;\r\n  }\r\n  \r\n  // For network access, use the same hostname but port 5000\r\n  return `${protocol}//${hostname}:${port}`;\r\n};\r\n\r\nconst API_BASE_URL = getApiBaseUrl();\r\n\r\n// Rules applied\r\n// Use a shared storage key that works across different origins\r\n// This allows schedule data to be shared between localhost and network access\r\nconst STORAGE_KEY = 'ringtone-scheduler-schedules';\r\n\r\nexport class ScheduleService {\r\n  private static instance: ScheduleService;\r\n  private scheduledRingtones: ScheduledRingtone[] = [];\r\n  private checkInterval: NodeJS.Timeout | null = null;\r\n  private audioElement: HTMLAudioElement | null = null;\r\n\r\n  private constructor() {\r\n    this.initializeService();\r\n  }\r\n\r\n  private async initializeService(): Promise<void> {\r\n    await this.loadFromStorage();\r\n    this.startScheduleChecker();\r\n  }\r\n\r\n  public static getInstance(): ScheduleService {\r\n    if (!ScheduleService.instance) {\r\n      ScheduleService.instance = new ScheduleService();\r\n    }\r\n    return ScheduleService.instance;\r\n  }\r\n\r\n  // Load scheduled ringtones from localStorage and sync with backend\r\n  private async loadFromStorage(): Promise<void> {\r\n    try {\r\n      // First, try to load from backend (for cross-origin sync)\r\n      await this.loadFromBackend();\r\n      \r\n      // Fallback to localStorage if backend fails\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      if (stored && this.scheduledRingtones.length === 0) {\r\n        this.scheduledRingtones = JSON.parse(stored);\r\n        console.log('üìÖ Loaded scheduled ringtones from localStorage fallback:', this.scheduledRingtones.length);\r\n        \r\n        // Sync localStorage data to backend\r\n        await this.syncToBackend();\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading scheduled ringtones:', error);\r\n      this.scheduledRingtones = [];\r\n    }\r\n  }\r\n\r\n  // Load schedule data from backend\r\n  private async loadFromBackend(): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/schedules`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      if (response.ok) {\r\n        const result = await response.json();\r\n        if (result.success && result.schedules) {\r\n          this.scheduledRingtones = result.schedules;\r\n          console.log('üìÖ Loaded scheduled ringtones from backend:', this.scheduledRingtones.length);\r\n          \r\n          // Update localStorage with backend data\r\n          localStorage.setItem(STORAGE_KEY, JSON.stringify(this.scheduledRingtones));\r\n        }\r\n      } else {\r\n        console.warn('‚ö†Ô∏è Failed to load schedules from backend, using localStorage');\r\n      }\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Backend schedule loading failed, using localStorage:', error);\r\n    }\r\n  }\r\n\r\n  // Sync current data to backend\r\n  private async syncToBackend(): Promise<void> {\r\n    try {\r\n      for (const schedule of this.scheduledRingtones) {\r\n        await this.saveScheduleToBackend(schedule);\r\n      }\r\n      console.log('üîÑ Synced localStorage data to backend');\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Failed to sync to backend:', error);\r\n    }\r\n  }\r\n\r\n  // Save individual schedule to backend\r\n  private async saveScheduleToBackend(schedule: ScheduledRingtone): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/schedules`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(schedule)\r\n      });\r\n\r\n      if (!response.ok) {\r\n        console.warn('‚ö†Ô∏è Failed to save schedule to backend:', schedule.id);\r\n      }\r\n    } catch (error) {\r\n      console.warn('‚ö†Ô∏è Error saving schedule to backend:', error);\r\n    }\r\n  }\r\n\r\n\r\n  // Save scheduled ringtones to localStorage and backend\r\n  private async saveToStorage(): Promise<void> {\r\n    try {\r\n      // Save to localStorage\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.scheduledRingtones));\r\n      console.log('üíæ Saved scheduled ringtones to localStorage');\r\n      \r\n      // Also save to backend for cross-origin sync\r\n      await this.syncToBackend();\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving scheduled ringtones:', error);\r\n    }\r\n  }\r\n\r\n  // Create a new scheduled ringtone\r\n  public async createSchedule(ringtone: AudioFile, formData: ScheduleFormData): Promise<ScheduledRingtone> {\r\n    try {\r\n      console.log('üöÄ Starting schedule creation process...');\r\n      console.log('üìã Schedule data:', { ringtone: ringtone.name, time: formData.time, days: formData.days });\r\n      \r\n      let ringtoneFilePath: string;\r\n      \r\n      // Check if this is a backend ringtone (already has a file path)\r\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\r\n        console.log('üìÅ This is a backend ringtone, using file path from backend...');\r\n        \r\n        if (ringtone.filePath) {\r\n          // Use the file path provided by the backend\r\n          ringtoneFilePath = ringtone.filePath;\r\n          console.log('‚úÖ Using file path from backend:', ringtoneFilePath);\r\n        } else {\r\n          // Fallback: extract the file path from the URL\r\n          console.log('‚ö†Ô∏è No file path provided, extracting from URL...');\r\n          const urlParts = ringtone.url.split('/');\r\n          const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\r\n          const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\r\n          \r\n          // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\r\n          let preferredFolder = folder;\r\n          let preferredFilename = filename;\r\n          \r\n          if (folder === 'mp3_ringtones') {\r\n            // Try to find the corresponding WAV file\r\n            const wavFilename = filename.replace('.mp3', '.wav');\r\n            preferredFolder = 'wav_ringtones';\r\n            preferredFilename = wavFilename;\r\n            console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\r\n          }\r\n          \r\n          // Construct the file path using the preferred format\r\n          ringtoneFilePath = `portable_app/backend/ringtones/${preferredFolder}/${preferredFilename}`;\r\n          console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\r\n        }\r\n      } else {\r\n        // This is a local ringtone, save it to get the file path\r\n        console.log('üíæ Saving local ringtone to get file path...');\r\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n        \r\n        if (!saveResult.success) {\r\n          throw new Error(`Failed to save ringtone: ${saveResult.error || 'Unknown error'}`);\r\n        }\r\n        \r\n        ringtoneFilePath = saveResult.file_path;\r\n        console.log('‚úÖ Local ringtone saved successfully:', ringtoneFilePath);\r\n      }\r\n      \r\n      const newSchedule: ScheduledRingtone = {\r\n        id: `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        ringtoneId: ringtone.id,\r\n        ringtoneName: ringtone.name,\r\n        ringtoneUrl: ringtone.url,\r\n        ringtoneFilePath: ringtoneFilePath, // Store the actual file path\r\n        time: formData.time,\r\n        days: formData.days,\r\n        isActive: true,\r\n        scheduleSource: formData.scheduleSource, // Store the scheduling method\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n\r\n      console.log('üìù Created schedule object:', newSchedule);\r\n\r\n      // Create Windows Task Scheduler task only if schedule source is 'device'\r\n      if (formData.scheduleSource === 'device') {\r\n        console.log('üîÑ Schedule source is device, checking Windows Task Scheduler availability...');\r\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\r\n        if (taskSchedulerAvailable) {\r\n          console.log('‚úÖ Windows Task Scheduler is available, creating task...');\r\n          try {\r\n            await this.createWindowsTask(newSchedule);\r\n            console.log('‚úÖ Windows Task Scheduler task created successfully');\r\n          } catch (taskError) {\r\n            console.warn('‚ö†Ô∏è Failed to create Windows Task Scheduler task, but continuing with local schedule:', taskError);\r\n          }\r\n        } else {\r\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, creating local schedule only');\r\n        }\r\n      } else {\r\n        console.log('‚ÑπÔ∏è Schedule source is web, creating browser-based schedule only');\r\n      }\r\n\r\n      this.scheduledRingtones.push(newSchedule);\r\n      await this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Created new schedule with Windows Task:', newSchedule);\r\n      return newSchedule;\r\n    } catch (error) {\r\n      console.error('‚ùå Error creating schedule:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all scheduled ringtones\r\n  public getAllSchedules(): ScheduledRingtone[] {\r\n    return [...this.scheduledRingtones];\r\n  }\r\n\r\n  // Get active scheduled ringtones\r\n  public getActiveSchedules(): ScheduledRingtone[] {\r\n    return this.scheduledRingtones.filter(schedule => schedule.isActive);\r\n  }\r\n\r\n  // Update a scheduled ringtone\r\n  public async updateSchedule(id: string, updates: Partial<ScheduledRingtone>): Promise<boolean> {\r\n    try {\r\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\r\n      if (index === -1) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\r\n        return false;\r\n      }\r\n\r\n      this.scheduledRingtones[index] = { ...this.scheduledRingtones[index], ...updates };\r\n      await this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Updated schedule:', id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error updating schedule:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Update a scheduled ringtone with form data\r\n  public async updateScheduleWithFormData(id: string, ringtone: AudioFile, formData: ScheduleFormData): Promise<boolean> {\r\n    try {\r\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\r\n      if (index === -1) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\r\n        return false;\r\n      }\r\n\r\n      const oldSchedule = this.scheduledRingtones[index];\r\n      \r\n      // Delete old Windows task\r\n      await this.deleteWindowsTask(oldSchedule.id);\r\n      \r\n      let ringtoneFilePath: string;\r\n      \r\n      // Check if this is a backend ringtone (already has a file path)\r\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\r\n        console.log('üìÅ This is a backend ringtone, using file path from backend...');\r\n        \r\n        if (ringtone.filePath) {\r\n          // Use the file path provided by the backend\r\n          ringtoneFilePath = ringtone.filePath;\r\n          console.log('‚úÖ Using file path from backend:', ringtoneFilePath);\r\n        } else {\r\n          // Fallback: extract the file path from the URL\r\n          console.log('‚ö†Ô∏è No file path provided, extracting from URL...');\r\n          const urlParts = ringtone.url.split('/');\r\n          const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\r\n          const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\r\n          \r\n          // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\r\n          let preferredFolder = folder;\r\n          let preferredFilename = filename;\r\n          \r\n          if (folder === 'mp3_ringtones') {\r\n            // Try to find the corresponding WAV file\r\n            const wavFilename = filename.replace('.mp3', '.wav');\r\n            preferredFolder = 'wav_ringtones';\r\n            preferredFilename = wavFilename;\r\n            console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\r\n          }\r\n          \r\n          // Construct the file path using the preferred format\r\n          ringtoneFilePath = `portable_app/backend/ringtones/${preferredFolder}/${preferredFilename}`;\r\n          console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\r\n        }\r\n      } else {\r\n        // This is a local ringtone, save it to get the file path\r\n        console.log('üíæ Saving updated ringtone to get file path...');\r\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n        \r\n        if (!saveResult.success) {\r\n          throw new Error(`Failed to save updated ringtone: ${saveResult.error || 'Unknown error'}`);\r\n        }\r\n        \r\n        ringtoneFilePath = saveResult.file_path;\r\n        console.log('‚úÖ Updated ringtone saved successfully:', ringtoneFilePath);\r\n      }\r\n      \r\n      const updates: Partial<ScheduledRingtone> = {\r\n        ringtoneId: ringtone.id,\r\n        ringtoneName: ringtone.name,\r\n        ringtoneUrl: ringtone.url,\r\n        ringtoneFilePath: ringtoneFilePath, // Store the actual file path\r\n        time: formData.time,\r\n        days: formData.days,\r\n        scheduleSource: formData.scheduleSource // Update the scheduling method\r\n      };\r\n\r\n      const updatedSchedule = { ...this.scheduledRingtones[index], ...updates };\r\n      \r\n      // Create new Windows task only if schedule source is 'device'\r\n      if (formData.scheduleSource === 'device') {\r\n        await this.createWindowsTask(updatedSchedule);\r\n      }\r\n\r\n      this.scheduledRingtones[index] = updatedSchedule;\r\n      await this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Updated schedule with form data and Windows Task:', id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error updating schedule with form data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Delete a scheduled ringtone\r\n  public async deleteSchedule(id: string): Promise<boolean> {\r\n    try {\r\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\r\n      if (index === -1) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for deletion:', id);\r\n        return false;\r\n      }\r\n\r\n      const scheduleToDelete = this.scheduledRingtones[index];\r\n\r\n      // Try to delete Windows Task Scheduler task only for device-based schedules\r\n      if (scheduleToDelete.scheduleSource === 'device') {\r\n        try {\r\n          await this.deleteWindowsTask(id);\r\n          console.log('‚úÖ Deleted Windows Task Scheduler task:', id);\r\n        } catch (taskError) {\r\n          console.warn('‚ö†Ô∏è Failed to delete Windows Task Scheduler task, but continuing with local deletion:', taskError);\r\n          // Continue with local deletion even if Windows task deletion fails\r\n        }\r\n      } else {\r\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler task to delete');\r\n      }\r\n\r\n      // Always delete from local storage\r\n      this.scheduledRingtones.splice(index, 1);\r\n      await this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Deleted schedule:', id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error deleting schedule:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Toggle schedule active status\r\n  public async toggleSchedule(id: string): Promise<boolean> {\r\n    try {\r\n      const schedule = this.scheduledRingtones.find(s => s.id === id);\r\n      if (!schedule) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for toggle:', id);\r\n        return false;\r\n      }\r\n\r\n      schedule.isActive = !schedule.isActive;\r\n      \r\n      // Update Windows Task Scheduler task status only for device-based schedules\r\n      if (schedule.scheduleSource === 'device') {\r\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\r\n        if (taskSchedulerAvailable) {\r\n          try {\r\n            if (schedule.isActive) {\r\n              await this.enableWindowsTask(id);\r\n            } else {\r\n              await this.disableWindowsTask(id);\r\n            }\r\n          } catch (taskError) {\r\n            console.warn('‚ö†Ô∏è Failed to update Windows Task Scheduler task, but continuing with local update:', taskError);\r\n          }\r\n        } else {\r\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, updating local schedule only');\r\n        }\r\n      } else {\r\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler interaction needed');\r\n      }\r\n      \r\n      await this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Toggled schedule and Windows Task:', id, 'Active:', schedule.isActive);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error toggling schedule:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Start the schedule checker\r\n  private startScheduleChecker(): void {\r\n    // Check every minute\r\n    this.checkInterval = setInterval(() => {\r\n      this.checkSchedules();\r\n    }, 60000); // 60 seconds\r\n\r\n    console.log('‚è∞ Started schedule checker');\r\n  }\r\n\r\n  // Stop the schedule checker\r\n  public stopScheduleChecker(): void {\r\n    if (this.checkInterval) {\r\n      clearInterval(this.checkInterval);\r\n      this.checkInterval = null;\r\n      console.log('‚èπÔ∏è Stopped schedule checker');\r\n    }\r\n  }\r\n\r\n  // Check if any schedules should be triggered\r\n  private checkSchedules(): void {\r\n    try {\r\n      const now = new Date();\r\n      const currentTime = now.toTimeString().slice(0, 5); // \"HH:MM\" format\r\n      const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n\r\n      const activeSchedules = this.getActiveSchedules();\r\n      \r\n      for (const schedule of activeSchedules) {\r\n        // Check if it's the right time and day\r\n        if (schedule.time === currentTime && schedule.days.includes(currentDay)) {\r\n          // Check if we haven't played this schedule today\r\n          const today = now.toDateString();\r\n          const lastPlayed = schedule.lastPlayed ? new Date(schedule.lastPlayed).toDateString() : null;\r\n          \r\n          if (lastPlayed !== today) {\r\n            this.playScheduledRingtone(schedule);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error checking schedules:', error);\r\n    }\r\n  }\r\n\r\n  // Play a scheduled ringtone\r\n  private async playScheduledRingtone(schedule: ScheduledRingtone): Promise<void> {\r\n    try {\r\n      console.log('üîî Playing scheduled ringtone:', schedule.ringtoneName);\r\n      \r\n      // Create audio element if it doesn't exist\r\n      if (!this.audioElement) {\r\n        this.audioElement = new Audio();\r\n      }\r\n\r\n      // Set the audio source\r\n      this.audioElement.src = schedule.ringtoneUrl;\r\n      this.audioElement.volume = 1.0; // Full volume for scheduled ringtones\r\n      \r\n      // Play the audio\r\n      await this.audioElement.play();\r\n      \r\n      // Update last played time\r\n      this.updateSchedule(schedule.id, { lastPlayed: new Date().toISOString() });\r\n      \r\n      console.log('‚úÖ Scheduled ringtone played successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå Error playing scheduled ringtone:', error);\r\n    }\r\n  }\r\n\r\n\r\n  // Stop current audio\r\n  public stopAudio(): void {\r\n    try {\r\n      if (this.audioElement) {\r\n        this.audioElement.pause();\r\n        this.audioElement.currentTime = 0;\r\n        console.log('‚èπÔ∏è Audio stopped');\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error stopping audio:', error);\r\n    }\r\n  }\r\n\r\n  // Check if Windows Task Scheduler service is available\r\n  private async isTaskSchedulerAvailable(): Promise<boolean> {\r\n    try {\r\n      console.log('üîç Checking Windows Task Scheduler availability...');\r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/status`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      console.log('üì° Task Scheduler status response:', response.status, response.statusText);\r\n\r\n      if (!response.ok) {\r\n        console.warn('‚ùå Task Scheduler status endpoint returned error:', response.status, response.statusText);\r\n        return false;\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('üìã Task Scheduler status result:', result);\r\n      \r\n      const isAvailable = result.success && result.available;\r\n      console.log('‚úÖ Task Scheduler available:', isAvailable);\r\n      return isAvailable;\r\n    } catch (error) {\r\n      console.error('‚ùå Error checking Windows Task Scheduler service:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Windows Task Scheduler integration methods\r\n  private async createWindowsTask(schedule: ScheduledRingtone): Promise<void> {\r\n    try {\r\n      // Use the file path if available, otherwise fall back to URL\r\n      const ringtonePath = schedule.ringtoneFilePath || schedule.ringtoneUrl;\r\n      \r\n      if (!schedule.ringtoneFilePath) {\r\n        console.warn('‚ö†Ô∏è No file path available for ringtone, using URL (may not work with Windows Task Scheduler)');\r\n      }\r\n      \r\n      console.log('üîß Creating Windows Task with ringtone path:', ringtonePath);\r\n      console.log('üîß Schedule object:', schedule);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/create`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: schedule.id,\r\n          ringtone_path: ringtonePath,\r\n          time: schedule.time,\r\n          days: schedule.days\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        console.error('‚ùå Windows Task Scheduler API error:', result);\r\n        throw new Error(result.error || 'Failed to create Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Created Windows Task Scheduler task:', schedule.id);\r\n    } catch (error) {\r\n      console.error('‚ùå Error creating Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async deleteWindowsTask(taskId: string): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Attempting to delete Windows Task Scheduler task:', taskId);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/delete`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: taskId\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Failed to delete Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Deleted Windows Task Scheduler task:', taskId);\r\n    } catch (error) {\r\n      console.error('‚ùå Error deleting Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async enableWindowsTask(taskId: string): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/enable`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: taskId\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Failed to enable Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Enabled Windows Task Scheduler task:', taskId);\r\n    } catch (error) {\r\n      console.error('‚ùå Error enabling Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async disableWindowsTask(taskId: string): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/disable`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: taskId\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Failed to disable Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Disabled Windows Task Scheduler task:', taskId);\r\n    } catch (error) {\r\n      console.error('‚ùå Error disabling Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Test ringtone playback using Windows Task Scheduler service or fallback\r\n  public async testPlayRingtone(ringtone: AudioFile): Promise<void> {\r\n    try {\r\n      // Try Windows Task Scheduler service first\r\n      const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\r\n      if (taskSchedulerAvailable) {\r\n        try {\r\n          let ringtoneFilePath: string;\r\n          \r\n          // Check if this is a backend ringtone (already has a file path)\r\n          if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\r\n            console.log('üìÅ This is a backend ringtone, using file path from backend...');\r\n            \r\n            if (ringtone.filePath) {\r\n              // Use the file path provided by the backend\r\n              ringtoneFilePath = ringtone.filePath;\r\n              console.log('‚úÖ Using file path from backend:', ringtoneFilePath);\r\n            } else {\r\n              // Fallback: extract the file path from the URL\r\n              console.log('‚ö†Ô∏è No file path provided, extracting from URL...');\r\n              const urlParts = ringtone.url.split('/');\r\n              const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\r\n              const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\r\n              \r\n              // Construct the file path\r\n              ringtoneFilePath = `portable_app/backend/ringtones/${folder}/${filename}`;\r\n              console.log('‚úÖ Extracted file path from backend URL:', ringtoneFilePath);\r\n            }\r\n          } else {\r\n            // This is a local ringtone, save it to get the file path\r\n            console.log('üíæ Saving ringtone for testing...');\r\n            const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n            \r\n            if (!saveResult.success) {\r\n              throw new Error(`Failed to save ringtone for testing: ${saveResult.error || 'Unknown error'}`);\r\n            }\r\n            \r\n            ringtoneFilePath = saveResult.file_path;\r\n            console.log('‚úÖ Ringtone saved for testing:', ringtoneFilePath);\r\n          }\r\n          \r\n          const response = await fetch(`${API_BASE_URL}/api/task-scheduler/test`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              ringtone_path: ringtoneFilePath\r\n            })\r\n          });\r\n\r\n          const result = await response.json();\r\n          if (!result.success) {\r\n            throw new Error(result.error || 'Failed to test ringtone');\r\n          }\r\n\r\n          console.log('‚úÖ Tested ringtone via Windows Task Scheduler:', ringtone.name);\r\n          return;\r\n        } catch (taskError) {\r\n          console.warn('‚ö†Ô∏è Windows Task Scheduler test failed, falling back to browser audio:', taskError);\r\n        }\r\n      }\r\n\r\n      // Fallback to browser audio\r\n      console.log('üîÑ Using browser audio fallback for testing:', ringtone.name);\r\n      if (!this.audioElement) {\r\n        this.audioElement = new Audio();\r\n      }\r\n\r\n      this.audioElement.src = ringtone.url;\r\n      this.audioElement.volume = 0.5; // Lower volume for testing\r\n      \r\n      await this.audioElement.play();\r\n      console.log('‚úÖ Test ringtone played successfully via browser audio');\r\n    } catch (error) {\r\n      console.error('‚ùå Error testing ringtone:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Cleanup method\r\n  public destroy(): void {\r\n    this.stopScheduleChecker();\r\n    this.stopAudio();\r\n    this.audioElement = null;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const scheduleService = ScheduleService.getInstance();\r\n"],"mappings":";AAAA;;AAGA,SAASA,eAAe,QAAQ,mBAAmB;;AAEnD;AACA;AACA,MAAMC,aAAa,GAAGA,CAAA,KAAc;EAClC,MAAMC,QAAQ,GAAGC,MAAM,CAACC,QAAQ,CAACF,QAAQ;EACzC,MAAMG,QAAQ,GAAGF,MAAM,CAACC,QAAQ,CAACC,QAAQ;EACzC,MAAMC,IAAI,GAAG,MAAM,CAAC,CAAC;;EAErB;EACA,IAAID,QAAQ,KAAK,WAAW,IAAIA,QAAQ,KAAK,WAAW,EAAE;IACxD,OAAO,GAAGH,QAAQ,KAAKG,QAAQ,IAAIC,IAAI,EAAE;EAC3C;;EAEA;EACA,OAAO,GAAGJ,QAAQ,KAAKG,QAAQ,IAAIC,IAAI,EAAE;AAC3C,CAAC;AAED,MAAMC,YAAY,GAAGN,aAAa,CAAC,CAAC;;AAEpC;AACA;AACA;AACA,MAAMO,WAAW,GAAG,8BAA8B;AAElD,OAAO,MAAMC,eAAe,CAAC;EAMnBC,WAAWA,CAAA,EAAG;IAAA,KAJdC,kBAAkB,GAAwB,EAAE;IAAA,KAC5CC,aAAa,GAA0B,IAAI;IAAA,KAC3CC,YAAY,GAA4B,IAAI;IAGlD,IAAI,CAACC,iBAAiB,CAAC,CAAC;EAC1B;EAEA,MAAcA,iBAAiBA,CAAA,EAAkB;IAC/C,MAAM,IAAI,CAACC,eAAe,CAAC,CAAC;IAC5B,IAAI,CAACC,oBAAoB,CAAC,CAAC;EAC7B;EAEA,OAAcC,WAAWA,CAAA,EAAoB;IAC3C,IAAI,CAACR,eAAe,CAACS,QAAQ,EAAE;MAC7BT,eAAe,CAACS,QAAQ,GAAG,IAAIT,eAAe,CAAC,CAAC;IAClD;IACA,OAAOA,eAAe,CAACS,QAAQ;EACjC;;EAEA;EACA,MAAcH,eAAeA,CAAA,EAAkB;IAC7C,IAAI;MACF;MACA,MAAM,IAAI,CAACI,eAAe,CAAC,CAAC;;MAE5B;MACA,MAAMC,MAAM,GAAGC,YAAY,CAACC,OAAO,CAACd,WAAW,CAAC;MAChD,IAAIY,MAAM,IAAI,IAAI,CAACT,kBAAkB,CAACY,MAAM,KAAK,CAAC,EAAE;QAClD,IAAI,CAACZ,kBAAkB,GAAGa,IAAI,CAACC,KAAK,CAACL,MAAM,CAAC;QAC5CM,OAAO,CAACC,GAAG,CAAC,2DAA2D,EAAE,IAAI,CAAChB,kBAAkB,CAACY,MAAM,CAAC;;QAExG;QACA,MAAM,IAAI,CAACK,aAAa,CAAC,CAAC;MAC5B;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,IAAI,CAAClB,kBAAkB,GAAG,EAAE;IAC9B;EACF;;EAEA;EACA,MAAcQ,eAAeA,CAAA,EAAkB;IAC7C,IAAI;MACF,MAAMW,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,gBAAgB,EAAE;QAC5DyB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEF,IAAIH,QAAQ,CAACI,EAAE,EAAE;QACf,MAAMC,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;QACpC,IAAID,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACG,SAAS,EAAE;UACtC,IAAI,CAAC3B,kBAAkB,GAAGwB,MAAM,CAACG,SAAS;UAC1CZ,OAAO,CAACC,GAAG,CAAC,6CAA6C,EAAE,IAAI,CAAChB,kBAAkB,CAACY,MAAM,CAAC;;UAE1F;UACAF,YAAY,CAACkB,OAAO,CAAC/B,WAAW,EAAEgB,IAAI,CAACgB,SAAS,CAAC,IAAI,CAAC7B,kBAAkB,CAAC,CAAC;QAC5E;MACF,CAAC,MAAM;QACLe,OAAO,CAACe,IAAI,CAAC,8DAA8D,CAAC;MAC9E;IACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;MACdH,OAAO,CAACe,IAAI,CAAC,yDAAyD,EAAEZ,KAAK,CAAC;IAChF;EACF;;EAEA;EACA,MAAcD,aAAaA,CAAA,EAAkB;IAC3C,IAAI;MACF,KAAK,MAAMc,QAAQ,IAAI,IAAI,CAAC/B,kBAAkB,EAAE;QAC9C,MAAM,IAAI,CAACgC,qBAAqB,CAACD,QAAQ,CAAC;MAC5C;MACAhB,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC;IACvD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,OAAO,CAACe,IAAI,CAAC,+BAA+B,EAAEZ,KAAK,CAAC;IACtD;EACF;;EAEA;EACA,MAAcc,qBAAqBA,CAACD,QAA2B,EAAiB;IAC9E,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,gBAAgB,EAAE;QAC5DyB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEpB,IAAI,CAACgB,SAAS,CAACE,QAAQ;MAC/B,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACI,EAAE,EAAE;QAChBR,OAAO,CAACe,IAAI,CAAC,wCAAwC,EAAEC,QAAQ,CAACG,EAAE,CAAC;MACrE;IACF,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACe,IAAI,CAAC,sCAAsC,EAAEZ,KAAK,CAAC;IAC7D;EACF;;EAGA;EACA,MAAciB,aAAaA,CAAA,EAAkB;IAC3C,IAAI;MACF;MACAzB,YAAY,CAACkB,OAAO,CAAC/B,WAAW,EAAEgB,IAAI,CAACgB,SAAS,CAAC,IAAI,CAAC7B,kBAAkB,CAAC,CAAC;MAC1Ee,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;;MAE3D;MACA,MAAM,IAAI,CAACC,aAAa,CAAC,CAAC;IAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF;;EAEA;EACA,MAAakB,cAAcA,CAACC,QAAmB,EAAEC,QAA0B,EAA8B;IACvG,IAAI;MACFvB,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;MACvDD,OAAO,CAACC,GAAG,CAAC,mBAAmB,EAAE;QAAEqB,QAAQ,EAAEA,QAAQ,CAACE,IAAI;QAAEC,IAAI,EAAEF,QAAQ,CAACE,IAAI;QAAEC,IAAI,EAAEH,QAAQ,CAACG;MAAK,CAAC,CAAC;MAEvG,IAAIC,gBAAwB;;MAE5B;MACA,IAAIL,QAAQ,CAACM,GAAG,CAACC,UAAU,CAAC,sCAAsC,CAAC,EAAE;QACnE7B,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;QAE7E,IAAIqB,QAAQ,CAACQ,QAAQ,EAAE;UACrB;UACAH,gBAAgB,GAAGL,QAAQ,CAACQ,QAAQ;UACpC9B,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE0B,gBAAgB,CAAC;QAClE,CAAC,MAAM;UACL;UACA3B,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;UAC/D,MAAM8B,QAAQ,GAAGT,QAAQ,CAACM,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;UACxC,MAAMC,MAAM,GAAGF,QAAQ,CAACA,QAAQ,CAAClC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;UAC9C,MAAMqC,QAAQ,GAAGH,QAAQ,CAACA,QAAQ,CAAClC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;UAEhD;UACA,IAAIsC,eAAe,GAAGF,MAAM;UAC5B,IAAIG,iBAAiB,GAAGF,QAAQ;UAEhC,IAAID,MAAM,KAAK,eAAe,EAAE;YAC9B;YACA,MAAMI,WAAW,GAAGH,QAAQ,CAACI,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;YACpDH,eAAe,GAAG,eAAe;YACjCC,iBAAiB,GAAGC,WAAW;YAC/BrC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEmC,iBAAiB,CAAC;UAC5E;;UAEA;UACAT,gBAAgB,GAAG,kCAAkCQ,eAAe,IAAIC,iBAAiB,EAAE;UAC3FpC,OAAO,CAACC,GAAG,CAAC,4DAA4D,EAAE0B,gBAAgB,CAAC;QAC7F;MACF,CAAC,MAAM;QACL;QACA3B,OAAO,CAACC,GAAG,CAAC,8CAA8C,CAAC;QAC3D,MAAMsC,UAAU,GAAG,MAAMjE,eAAe,CAACkE,YAAY,CAAClB,QAAQ,CAAC;QAE/D,IAAI,CAACiB,UAAU,CAAC5B,OAAO,EAAE;UACvB,MAAM,IAAI8B,KAAK,CAAC,4BAA4BF,UAAU,CAACpC,KAAK,IAAI,eAAe,EAAE,CAAC;QACpF;QAEAwB,gBAAgB,GAAGY,UAAU,CAACG,SAAS;QACvC1C,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAE0B,gBAAgB,CAAC;MACvE;MAEA,MAAMgB,WAA8B,GAAG;QACrCxB,EAAE,EAAE,YAAYyB,IAAI,CAACC,GAAG,CAAC,CAAC,IAAIC,IAAI,CAACC,MAAM,CAAC,CAAC,CAACC,QAAQ,CAAC,EAAE,CAAC,CAACC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE;QACvEC,UAAU,EAAE5B,QAAQ,CAACH,EAAE;QACvBgC,YAAY,EAAE7B,QAAQ,CAACE,IAAI;QAC3B4B,WAAW,EAAE9B,QAAQ,CAACM,GAAG;QACzBD,gBAAgB,EAAEA,gBAAgB;QAAE;QACpCF,IAAI,EAAEF,QAAQ,CAACE,IAAI;QACnBC,IAAI,EAAEH,QAAQ,CAACG,IAAI;QACnB2B,QAAQ,EAAE,IAAI;QACdC,cAAc,EAAE/B,QAAQ,CAAC+B,cAAc;QAAE;QACzCC,SAAS,EAAE,IAAIX,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;MACpC,CAAC;MAEDxD,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAE0C,WAAW,CAAC;;MAEvD;MACA,IAAIpB,QAAQ,CAAC+B,cAAc,KAAK,QAAQ,EAAE;QACxCtD,OAAO,CAACC,GAAG,CAAC,+EAA+E,CAAC;QAC5F,MAAMwD,sBAAsB,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAAC,CAAC;QACpE,IAAID,sBAAsB,EAAE;UAC1BzD,OAAO,CAACC,GAAG,CAAC,yDAAyD,CAAC;UACtE,IAAI;YACF,MAAM,IAAI,CAAC0D,iBAAiB,CAAChB,WAAW,CAAC;YACzC3C,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;UACnE,CAAC,CAAC,OAAO2D,SAAS,EAAE;YAClB5D,OAAO,CAACe,IAAI,CAAC,sFAAsF,EAAE6C,SAAS,CAAC;UACjH;QACF,CAAC,MAAM;UACL5D,OAAO,CAACC,GAAG,CAAC,uEAAuE,CAAC;QACtF;MACF,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;MAChF;MAEA,IAAI,CAAChB,kBAAkB,CAAC4E,IAAI,CAAClB,WAAW,CAAC;MACzC,MAAM,IAAI,CAACvB,aAAa,CAAC,CAAC;MAE1BpB,OAAO,CAACC,GAAG,CAAC,2CAA2C,EAAE0C,WAAW,CAAC;MACrE,OAAOA,WAAW;IACpB,CAAC,CAAC,OAAOxC,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,MAAMA,KAAK;IACb;EACF;;EAEA;EACO2D,eAAeA,CAAA,EAAwB;IAC5C,OAAO,CAAC,GAAG,IAAI,CAAC7E,kBAAkB,CAAC;EACrC;;EAEA;EACO8E,kBAAkBA,CAAA,EAAwB;IAC/C,OAAO,IAAI,CAAC9E,kBAAkB,CAAC+E,MAAM,CAAChD,QAAQ,IAAIA,QAAQ,CAACqC,QAAQ,CAAC;EACtE;;EAEA;EACA,MAAaY,cAAcA,CAAC9C,EAAU,EAAE+C,OAAmC,EAAoB;IAC7F,IAAI;MACF,MAAMC,KAAK,GAAG,IAAI,CAAClF,kBAAkB,CAACmF,SAAS,CAACpD,QAAQ,IAAIA,QAAQ,CAACG,EAAE,KAAKA,EAAE,CAAC;MAC/E,IAAIgD,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBnE,OAAO,CAACe,IAAI,CAAC,mCAAmC,EAAEI,EAAE,CAAC;QACrD,OAAO,KAAK;MACd;MAEA,IAAI,CAAClC,kBAAkB,CAACkF,KAAK,CAAC,GAAG;QAAE,GAAG,IAAI,CAAClF,kBAAkB,CAACkF,KAAK,CAAC;QAAE,GAAGD;MAAQ,CAAC;MAClF,MAAM,IAAI,CAAC9C,aAAa,CAAC,CAAC;MAE1BpB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEkB,EAAE,CAAC;MACtC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAakE,0BAA0BA,CAAClD,EAAU,EAAEG,QAAmB,EAAEC,QAA0B,EAAoB;IACrH,IAAI;MACF,MAAM4C,KAAK,GAAG,IAAI,CAAClF,kBAAkB,CAACmF,SAAS,CAACpD,QAAQ,IAAIA,QAAQ,CAACG,EAAE,KAAKA,EAAE,CAAC;MAC/E,IAAIgD,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBnE,OAAO,CAACe,IAAI,CAAC,mCAAmC,EAAEI,EAAE,CAAC;QACrD,OAAO,KAAK;MACd;MAEA,MAAMmD,WAAW,GAAG,IAAI,CAACrF,kBAAkB,CAACkF,KAAK,CAAC;;MAElD;MACA,MAAM,IAAI,CAACI,iBAAiB,CAACD,WAAW,CAACnD,EAAE,CAAC;MAE5C,IAAIQ,gBAAwB;;MAE5B;MACA,IAAIL,QAAQ,CAACM,GAAG,CAACC,UAAU,CAAC,sCAAsC,CAAC,EAAE;QACnE7B,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;QAE7E,IAAIqB,QAAQ,CAACQ,QAAQ,EAAE;UACrB;UACAH,gBAAgB,GAAGL,QAAQ,CAACQ,QAAQ;UACpC9B,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE0B,gBAAgB,CAAC;QAClE,CAAC,MAAM;UACL;UACA3B,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;UAC/D,MAAM8B,QAAQ,GAAGT,QAAQ,CAACM,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;UACxC,MAAMC,MAAM,GAAGF,QAAQ,CAACA,QAAQ,CAAClC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;UAC9C,MAAMqC,QAAQ,GAAGH,QAAQ,CAACA,QAAQ,CAAClC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;UAEhD;UACA,IAAIsC,eAAe,GAAGF,MAAM;UAC5B,IAAIG,iBAAiB,GAAGF,QAAQ;UAEhC,IAAID,MAAM,KAAK,eAAe,EAAE;YAC9B;YACA,MAAMI,WAAW,GAAGH,QAAQ,CAACI,OAAO,CAAC,MAAM,EAAE,MAAM,CAAC;YACpDH,eAAe,GAAG,eAAe;YACjCC,iBAAiB,GAAGC,WAAW;YAC/BrC,OAAO,CAACC,GAAG,CAAC,0CAA0C,EAAEmC,iBAAiB,CAAC;UAC5E;;UAEA;UACAT,gBAAgB,GAAG,kCAAkCQ,eAAe,IAAIC,iBAAiB,EAAE;UAC3FpC,OAAO,CAACC,GAAG,CAAC,4DAA4D,EAAE0B,gBAAgB,CAAC;QAC7F;MACF,CAAC,MAAM;QACL;QACA3B,OAAO,CAACC,GAAG,CAAC,gDAAgD,CAAC;QAC7D,MAAMsC,UAAU,GAAG,MAAMjE,eAAe,CAACkE,YAAY,CAAClB,QAAQ,CAAC;QAE/D,IAAI,CAACiB,UAAU,CAAC5B,OAAO,EAAE;UACvB,MAAM,IAAI8B,KAAK,CAAC,oCAAoCF,UAAU,CAACpC,KAAK,IAAI,eAAe,EAAE,CAAC;QAC5F;QAEAwB,gBAAgB,GAAGY,UAAU,CAACG,SAAS;QACvC1C,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE0B,gBAAgB,CAAC;MACzE;MAEA,MAAMuC,OAAmC,GAAG;QAC1ChB,UAAU,EAAE5B,QAAQ,CAACH,EAAE;QACvBgC,YAAY,EAAE7B,QAAQ,CAACE,IAAI;QAC3B4B,WAAW,EAAE9B,QAAQ,CAACM,GAAG;QACzBD,gBAAgB,EAAEA,gBAAgB;QAAE;QACpCF,IAAI,EAAEF,QAAQ,CAACE,IAAI;QACnBC,IAAI,EAAEH,QAAQ,CAACG,IAAI;QACnB4B,cAAc,EAAE/B,QAAQ,CAAC+B,cAAc,CAAC;MAC1C,CAAC;MAED,MAAMkB,eAAe,GAAG;QAAE,GAAG,IAAI,CAACvF,kBAAkB,CAACkF,KAAK,CAAC;QAAE,GAAGD;MAAQ,CAAC;;MAEzE;MACA,IAAI3C,QAAQ,CAAC+B,cAAc,KAAK,QAAQ,EAAE;QACxC,MAAM,IAAI,CAACK,iBAAiB,CAACa,eAAe,CAAC;MAC/C;MAEA,IAAI,CAACvF,kBAAkB,CAACkF,KAAK,CAAC,GAAGK,eAAe;MAChD,MAAM,IAAI,CAACpD,aAAa,CAAC,CAAC;MAE1BpB,OAAO,CAACC,GAAG,CAAC,qDAAqD,EAAEkB,EAAE,CAAC;MACtE,OAAO,IAAI;IACb,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,2CAA2C,EAAEA,KAAK,CAAC;MACjE,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAasE,cAAcA,CAACtD,EAAU,EAAoB;IACxD,IAAI;MACF,MAAMgD,KAAK,GAAG,IAAI,CAAClF,kBAAkB,CAACmF,SAAS,CAACpD,QAAQ,IAAIA,QAAQ,CAACG,EAAE,KAAKA,EAAE,CAAC;MAC/E,IAAIgD,KAAK,KAAK,CAAC,CAAC,EAAE;QAChBnE,OAAO,CAACe,IAAI,CAAC,qCAAqC,EAAEI,EAAE,CAAC;QACvD,OAAO,KAAK;MACd;MAEA,MAAMuD,gBAAgB,GAAG,IAAI,CAACzF,kBAAkB,CAACkF,KAAK,CAAC;;MAEvD;MACA,IAAIO,gBAAgB,CAACpB,cAAc,KAAK,QAAQ,EAAE;QAChD,IAAI;UACF,MAAM,IAAI,CAACiB,iBAAiB,CAACpD,EAAE,CAAC;UAChCnB,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEkB,EAAE,CAAC;QAC3D,CAAC,CAAC,OAAOyC,SAAS,EAAE;UAClB5D,OAAO,CAACe,IAAI,CAAC,sFAAsF,EAAE6C,SAAS,CAAC;UAC/G;QACF;MACF,CAAC,MAAM;QACL5D,OAAO,CAACC,GAAG,CAAC,iEAAiE,CAAC;MAChF;;MAEA;MACA,IAAI,CAAChB,kBAAkB,CAAC0F,MAAM,CAACR,KAAK,EAAE,CAAC,CAAC;MACxC,MAAM,IAAI,CAAC/C,aAAa,CAAC,CAAC;MAE1BpB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEkB,EAAE,CAAC;MACtC,OAAO,IAAI;IACb,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAayE,cAAcA,CAACzD,EAAU,EAAoB;IACxD,IAAI;MACF,MAAMH,QAAQ,GAAG,IAAI,CAAC/B,kBAAkB,CAAC4F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAAC3D,EAAE,KAAKA,EAAE,CAAC;MAC/D,IAAI,CAACH,QAAQ,EAAE;QACbhB,OAAO,CAACe,IAAI,CAAC,mCAAmC,EAAEI,EAAE,CAAC;QACrD,OAAO,KAAK;MACd;MAEAH,QAAQ,CAACqC,QAAQ,GAAG,CAACrC,QAAQ,CAACqC,QAAQ;;MAEtC;MACA,IAAIrC,QAAQ,CAACsC,cAAc,KAAK,QAAQ,EAAE;QACxC,MAAMG,sBAAsB,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAAC,CAAC;QACpE,IAAID,sBAAsB,EAAE;UAC1B,IAAI;YACF,IAAIzC,QAAQ,CAACqC,QAAQ,EAAE;cACrB,MAAM,IAAI,CAAC0B,iBAAiB,CAAC5D,EAAE,CAAC;YAClC,CAAC,MAAM;cACL,MAAM,IAAI,CAAC6D,kBAAkB,CAAC7D,EAAE,CAAC;YACnC;UACF,CAAC,CAAC,OAAOyC,SAAS,EAAE;YAClB5D,OAAO,CAACe,IAAI,CAAC,oFAAoF,EAAE6C,SAAS,CAAC;UAC/G;QACF,CAAC,MAAM;UACL5D,OAAO,CAACC,GAAG,CAAC,uEAAuE,CAAC;QACtF;MACF,CAAC,MAAM;QACLD,OAAO,CAACC,GAAG,CAAC,qEAAqE,CAAC;MACpF;MAEA,MAAM,IAAI,CAACmB,aAAa,CAAC,CAAC;MAE1BpB,OAAO,CAACC,GAAG,CAAC,sCAAsC,EAAEkB,EAAE,EAAE,SAAS,EAAEH,QAAQ,CAACqC,QAAQ,CAAC;MACrF,OAAO,IAAI;IACb,CAAC,CAAC,OAAOlD,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MAClD,OAAO,KAAK;IACd;EACF;;EAEA;EACQb,oBAAoBA,CAAA,EAAS;IACnC;IACA,IAAI,CAACJ,aAAa,GAAG+F,WAAW,CAAC,MAAM;MACrC,IAAI,CAACC,cAAc,CAAC,CAAC;IACvB,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;;IAEXlF,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC3C;;EAEA;EACOkF,mBAAmBA,CAAA,EAAS;IACjC,IAAI,IAAI,CAACjG,aAAa,EAAE;MACtBkG,aAAa,CAAC,IAAI,CAAClG,aAAa,CAAC;MACjC,IAAI,CAACA,aAAa,GAAG,IAAI;MACzBc,OAAO,CAACC,GAAG,CAAC,6BAA6B,CAAC;IAC5C;EACF;;EAEA;EACQiF,cAAcA,CAAA,EAAS;IAC7B,IAAI;MACF,MAAMrC,GAAG,GAAG,IAAID,IAAI,CAAC,CAAC;MACtB,MAAMyC,WAAW,GAAGxC,GAAG,CAACyC,YAAY,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MACpD,MAAMC,UAAU,GAAG3C,GAAG,CAAC4C,MAAM,CAAC,CAAC,CAAC,CAAC;;MAEjC,MAAMC,eAAe,GAAG,IAAI,CAAC3B,kBAAkB,CAAC,CAAC;MAEjD,KAAK,MAAM/C,QAAQ,IAAI0E,eAAe,EAAE;QACtC;QACA,IAAI1E,QAAQ,CAACS,IAAI,KAAK4D,WAAW,IAAIrE,QAAQ,CAACU,IAAI,CAACiE,QAAQ,CAACH,UAAU,CAAC,EAAE;UACvE;UACA,MAAMI,KAAK,GAAG/C,GAAG,CAACgD,YAAY,CAAC,CAAC;UAChC,MAAMC,UAAU,GAAG9E,QAAQ,CAAC8E,UAAU,GAAG,IAAIlD,IAAI,CAAC5B,QAAQ,CAAC8E,UAAU,CAAC,CAACD,YAAY,CAAC,CAAC,GAAG,IAAI;UAE5F,IAAIC,UAAU,KAAKF,KAAK,EAAE;YACxB,IAAI,CAACG,qBAAqB,CAAC/E,QAAQ,CAAC;UACtC;QACF;MACF;IACF,CAAC,CAAC,OAAOb,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;IACrD;EACF;;EAEA;EACA,MAAc4F,qBAAqBA,CAAC/E,QAA2B,EAAiB;IAC9E,IAAI;MACFhB,OAAO,CAACC,GAAG,CAAC,gCAAgC,EAAEe,QAAQ,CAACmC,YAAY,CAAC;;MAEpE;MACA,IAAI,CAAC,IAAI,CAAChE,YAAY,EAAE;QACtB,IAAI,CAACA,YAAY,GAAG,IAAI6G,KAAK,CAAC,CAAC;MACjC;;MAEA;MACA,IAAI,CAAC7G,YAAY,CAAC8G,GAAG,GAAGjF,QAAQ,CAACoC,WAAW;MAC5C,IAAI,CAACjE,YAAY,CAAC+G,MAAM,GAAG,GAAG,CAAC,CAAC;;MAEhC;MACA,MAAM,IAAI,CAAC/G,YAAY,CAACgH,IAAI,CAAC,CAAC;;MAE9B;MACA,IAAI,CAAClC,cAAc,CAACjD,QAAQ,CAACG,EAAE,EAAE;QAAE2E,UAAU,EAAE,IAAIlD,IAAI,CAAC,CAAC,CAACY,WAAW,CAAC;MAAE,CAAC,CAAC;MAE1ExD,OAAO,CAACC,GAAG,CAAC,0CAA0C,CAAC;IACzD,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,qCAAqC,EAAEA,KAAK,CAAC;IAC7D;EACF;;EAGA;EACOiG,SAASA,CAAA,EAAS;IACvB,IAAI;MACF,IAAI,IAAI,CAACjH,YAAY,EAAE;QACrB,IAAI,CAACA,YAAY,CAACkH,KAAK,CAAC,CAAC;QACzB,IAAI,CAAClH,YAAY,CAACkG,WAAW,GAAG,CAAC;QACjCrF,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;MACjC;IACF,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,yBAAyB,EAAEA,KAAK,CAAC;IACjD;EACF;;EAEA;EACA,MAAcuD,wBAAwBA,CAAA,EAAqB;IACzD,IAAI;MACF1D,OAAO,CAACC,GAAG,CAAC,oDAAoD,CAAC;MACjE,MAAMG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,4BAA4B,EAAE;QACxEyB,MAAM,EAAE,KAAK;QACbC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MAEFP,OAAO,CAACC,GAAG,CAAC,oCAAoC,EAAEG,QAAQ,CAACkG,MAAM,EAAElG,QAAQ,CAACmG,UAAU,CAAC;MAEvF,IAAI,CAACnG,QAAQ,CAACI,EAAE,EAAE;QAChBR,OAAO,CAACe,IAAI,CAAC,kDAAkD,EAAEX,QAAQ,CAACkG,MAAM,EAAElG,QAAQ,CAACmG,UAAU,CAAC;QACtG,OAAO,KAAK;MACd;MAEA,MAAM9F,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpCV,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEQ,MAAM,CAAC;MAEvD,MAAM+F,WAAW,GAAG/F,MAAM,CAACE,OAAO,IAAIF,MAAM,CAACgG,SAAS;MACtDzG,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEuG,WAAW,CAAC;MACvD,OAAOA,WAAW;IACpB,CAAC,CAAC,OAAOrG,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,kDAAkD,EAAEA,KAAK,CAAC;MACxE,OAAO,KAAK;IACd;EACF;;EAEA;EACA,MAAcwD,iBAAiBA,CAAC3C,QAA2B,EAAiB;IAC1E,IAAI;MACF;MACA,MAAM0F,YAAY,GAAG1F,QAAQ,CAACW,gBAAgB,IAAIX,QAAQ,CAACoC,WAAW;MAEtE,IAAI,CAACpC,QAAQ,CAACW,gBAAgB,EAAE;QAC9B3B,OAAO,CAACe,IAAI,CAAC,8FAA8F,CAAC;MAC9G;MAEAf,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEyG,YAAY,CAAC;MACzE1G,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEe,QAAQ,CAAC;MAE5C,MAAMZ,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,4BAA4B,EAAE;QACxEyB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEpB,IAAI,CAACgB,SAAS,CAAC;UACnB6F,SAAS,EAAE3F,QAAQ,CAACG,EAAE;UACtByF,aAAa,EAAEF,YAAY;UAC3BjF,IAAI,EAAET,QAAQ,CAACS,IAAI;UACnBC,IAAI,EAAEV,QAAQ,CAACU;QACjB,CAAC;MACH,CAAC,CAAC;MAEF,MAAMjB,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpC,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;QACnBX,OAAO,CAACG,KAAK,CAAC,qCAAqC,EAAEM,MAAM,CAAC;QAC5D,MAAM,IAAIgC,KAAK,CAAChC,MAAM,CAACN,KAAK,IAAI,+BAA+B,CAAC;MAClE;MAEAH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAEe,QAAQ,CAACG,EAAE,CAAC;IACpE,CAAC,CAAC,OAAOhB,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;EAEA,MAAcoE,iBAAiBA,CAACsC,MAAc,EAAiB;IAC7D,IAAI;MACF7G,OAAO,CAACC,GAAG,CAAC,sDAAsD,EAAE4G,MAAM,CAAC;MAE3E,MAAMzG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,4BAA4B,EAAE;QACxEyB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEpB,IAAI,CAACgB,SAAS,CAAC;UACnB6F,SAAS,EAAEE;QACb,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACzG,QAAQ,CAACI,EAAE,EAAE;QAChB,MAAM,IAAIiC,KAAK,CAAC,QAAQrC,QAAQ,CAACkG,MAAM,KAAKlG,QAAQ,CAACmG,UAAU,EAAE,CAAC;MACpE;MAEA,MAAM9F,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpC,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;QACnB,MAAM,IAAI8B,KAAK,CAAChC,MAAM,CAACN,KAAK,IAAI,+BAA+B,CAAC;MAClE;MAEAH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE4G,MAAM,CAAC;IAC/D,CAAC,CAAC,OAAO1G,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;EAEA,MAAc4E,iBAAiBA,CAAC8B,MAAc,EAAiB;IAC7D,IAAI;MACF,MAAMzG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,4BAA4B,EAAE;QACxEyB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEpB,IAAI,CAACgB,SAAS,CAAC;UACnB6F,SAAS,EAAEE;QACb,CAAC;MACH,CAAC,CAAC;MAEF,MAAMpG,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpC,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;QACnB,MAAM,IAAI8B,KAAK,CAAChC,MAAM,CAACN,KAAK,IAAI,+BAA+B,CAAC;MAClE;MAEAH,OAAO,CAACC,GAAG,CAAC,wCAAwC,EAAE4G,MAAM,CAAC;IAC/D,CAAC,CAAC,OAAO1G,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,gCAAgC,EAAEA,KAAK,CAAC;MACtD,MAAMA,KAAK;IACb;EACF;EAEA,MAAc6E,kBAAkBA,CAAC6B,MAAc,EAAiB;IAC9D,IAAI;MACF,MAAMzG,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,6BAA6B,EAAE;QACzEyB,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDW,IAAI,EAAEpB,IAAI,CAACgB,SAAS,CAAC;UACnB6F,SAAS,EAAEE;QACb,CAAC;MACH,CAAC,CAAC;MAEF,MAAMpG,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;MACpC,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;QACnB,MAAM,IAAI8B,KAAK,CAAChC,MAAM,CAACN,KAAK,IAAI,gCAAgC,CAAC;MACnE;MAEAH,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE4G,MAAM,CAAC;IAChE,CAAC,CAAC,OAAO1G,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAMA,KAAK;IACb;EACF;;EAEA;EACA,MAAa2G,gBAAgBA,CAACxF,QAAmB,EAAiB;IAChE,IAAI;MACF;MACA,MAAMmC,sBAAsB,GAAG,MAAM,IAAI,CAACC,wBAAwB,CAAC,CAAC;MACpE,IAAID,sBAAsB,EAAE;QAC1B,IAAI;UACF,IAAI9B,gBAAwB;;UAE5B;UACA,IAAIL,QAAQ,CAACM,GAAG,CAACC,UAAU,CAAC,sCAAsC,CAAC,EAAE;YACnE7B,OAAO,CAACC,GAAG,CAAC,gEAAgE,CAAC;YAE7E,IAAIqB,QAAQ,CAACQ,QAAQ,EAAE;cACrB;cACAH,gBAAgB,GAAGL,QAAQ,CAACQ,QAAQ;cACpC9B,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAE0B,gBAAgB,CAAC;YAClE,CAAC,MAAM;cACL;cACA3B,OAAO,CAACC,GAAG,CAAC,kDAAkD,CAAC;cAC/D,MAAM8B,QAAQ,GAAGT,QAAQ,CAACM,GAAG,CAACI,KAAK,CAAC,GAAG,CAAC;cACxC,MAAMC,MAAM,GAAGF,QAAQ,CAACA,QAAQ,CAAClC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;cAC9C,MAAMqC,QAAQ,GAAGH,QAAQ,CAACA,QAAQ,CAAClC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;;cAEhD;cACA8B,gBAAgB,GAAG,kCAAkCM,MAAM,IAAIC,QAAQ,EAAE;cACzElC,OAAO,CAACC,GAAG,CAAC,yCAAyC,EAAE0B,gBAAgB,CAAC;YAC1E;UACF,CAAC,MAAM;YACL;YACA3B,OAAO,CAACC,GAAG,CAAC,mCAAmC,CAAC;YAChD,MAAMsC,UAAU,GAAG,MAAMjE,eAAe,CAACkE,YAAY,CAAClB,QAAQ,CAAC;YAE/D,IAAI,CAACiB,UAAU,CAAC5B,OAAO,EAAE;cACvB,MAAM,IAAI8B,KAAK,CAAC,wCAAwCF,UAAU,CAACpC,KAAK,IAAI,eAAe,EAAE,CAAC;YAChG;YAEAwB,gBAAgB,GAAGY,UAAU,CAACG,SAAS;YACvC1C,OAAO,CAACC,GAAG,CAAC,+BAA+B,EAAE0B,gBAAgB,CAAC;UAChE;UAEA,MAAMvB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAGxB,YAAY,0BAA0B,EAAE;YACtEyB,MAAM,EAAE,MAAM;YACdC,OAAO,EAAE;cACP,cAAc,EAAE;YAClB,CAAC;YACDW,IAAI,EAAEpB,IAAI,CAACgB,SAAS,CAAC;cACnB8F,aAAa,EAAEjF;YACjB,CAAC;UACH,CAAC,CAAC;UAEF,MAAMlB,MAAM,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;UACpC,IAAI,CAACD,MAAM,CAACE,OAAO,EAAE;YACnB,MAAM,IAAI8B,KAAK,CAAChC,MAAM,CAACN,KAAK,IAAI,yBAAyB,CAAC;UAC5D;UAEAH,OAAO,CAACC,GAAG,CAAC,+CAA+C,EAAEqB,QAAQ,CAACE,IAAI,CAAC;UAC3E;QACF,CAAC,CAAC,OAAOoC,SAAS,EAAE;UAClB5D,OAAO,CAACe,IAAI,CAAC,uEAAuE,EAAE6C,SAAS,CAAC;QAClG;MACF;;MAEA;MACA5D,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAAEqB,QAAQ,CAACE,IAAI,CAAC;MAC1E,IAAI,CAAC,IAAI,CAACrC,YAAY,EAAE;QACtB,IAAI,CAACA,YAAY,GAAG,IAAI6G,KAAK,CAAC,CAAC;MACjC;MAEA,IAAI,CAAC7G,YAAY,CAAC8G,GAAG,GAAG3E,QAAQ,CAACM,GAAG;MACpC,IAAI,CAACzC,YAAY,CAAC+G,MAAM,GAAG,GAAG,CAAC,CAAC;;MAEhC,MAAM,IAAI,CAAC/G,YAAY,CAACgH,IAAI,CAAC,CAAC;MAC9BnG,OAAO,CAACC,GAAG,CAAC,uDAAuD,CAAC;IACtE,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdH,OAAO,CAACG,KAAK,CAAC,2BAA2B,EAAEA,KAAK,CAAC;MACjD,MAAMA,KAAK;IACb;EACF;;EAEA;EACO4G,OAAOA,CAAA,EAAS;IACrB,IAAI,CAAC5B,mBAAmB,CAAC,CAAC;IAC1B,IAAI,CAACiB,SAAS,CAAC,CAAC;IAChB,IAAI,CAACjH,YAAY,GAAG,IAAI;EAC1B;AACF;;AAEA;AAAA6H,gBAAA,GAxtBajI,eAAe;AAAfA,eAAe,CACXS,QAAQ;AAwtBzB,OAAO,MAAMyH,eAAe,GAAGlI,eAAe,CAACQ,WAAW,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}