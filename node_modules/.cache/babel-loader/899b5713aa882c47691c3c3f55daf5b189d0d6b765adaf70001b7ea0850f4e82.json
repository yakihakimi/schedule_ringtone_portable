{"ast":null,"code":"// Rules applied\n\nexport const API_BASE_URL = 'http://localhost:5000/api';\nclass RingtoneService {\n  async makeRequest(endpoint, options = {}) {\n    try {\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n        headers: {\n          'Content-Type': 'application/json',\n          ...options.headers\n        },\n        ...options\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error(`API request failed for ${endpoint}:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n  async saveRingtone(audioFile) {\n    try {\n      // Convert the audio file to a blob if it's not already\n      let fileToUpload;\n      if (audioFile.file instanceof File) {\n        fileToUpload = audioFile.file;\n      } else {\n        // If we have a URL, fetch it and create a file\n        const response = await fetch(audioFile.url);\n        const blob = await response.blob();\n        fileToUpload = new File([blob], audioFile.name, {\n          type: blob.type\n        });\n      }\n      const formData = new FormData();\n      formData.append('file', fileToUpload);\n\n      // Add metadata\n      formData.append('original_name', audioFile.name.replace('Ringtone_', ''));\n      formData.append('start_time', (audioFile.startTime || 0).toString());\n      formData.append('end_time', (audioFile.endTime || 0).toString());\n      formData.append('duration', audioFile.duration.toString());\n      const response = await fetch(`${API_BASE_URL}/ringtones`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error saving ringtone:', error);\n      return {\n        success: false,\n        message: 'Failed to save ringtone',\n        filename: '',\n        file_path: '',\n        size: 0,\n        created: '',\n        metadata: {},\n        mp3_available: false,\n        format: '',\n        folder: '',\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n  async listRingtones() {\n    return this.makeRequest('/ringtones');\n  }\n  async downloadRingtone(filename, folder) {\n    try {\n      let endpoint = `/ringtones/${filename}`;\n\n      // If folder is provided, use the new folder-based endpoint\n      if (folder) {\n        endpoint = `/ringtones/${folder}/${filename}`;\n      }\n      const response = await fetch(`${API_BASE_URL}${endpoint}`);\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const blob = await response.blob();\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = filename;\n      document.body.appendChild(a);\n      a.click();\n      window.URL.revokeObjectURL(url);\n      document.body.removeChild(a);\n    } catch (error) {\n      console.error('Error downloading ringtone:', error);\n      throw error;\n    }\n  }\n  async deleteRingtone(filename, folder) {\n    let endpoint = `/ringtones/${filename}`;\n\n    // If folder is provided, use the new folder-based endpoint\n    if (folder) {\n      endpoint = `/ringtones/${folder}/${filename}`;\n    }\n    return this.makeRequest(endpoint, {\n      method: 'DELETE'\n    });\n  }\n  async uploadAudioFile(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await fetch(`${API_BASE_URL}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (!response.ok) {\n        const errorData = await response.json().catch(() => ({}));\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\n      }\n      const data = await response.json();\n      return data;\n    } catch (error) {\n      console.error('Error uploading audio file:', error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error occurred'\n      };\n    }\n  }\n  async checkServerHealth() {\n    try {\n      const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\n      return response.ok;\n    } catch (error) {\n      console.error('Server health check failed:', error);\n      return false;\n    }\n  }\n}\nexport const ringtoneService = new RingtoneService();\nexport default ringtoneService;","map":{"version":3,"names":["API_BASE_URL","RingtoneService","makeRequest","endpoint","options","response","fetch","headers","ok","errorData","json","catch","Error","error","status","statusText","data","console","success","message","saveRingtone","audioFile","fileToUpload","file","File","url","blob","name","type","formData","FormData","append","replace","startTime","toString","endTime","duration","method","body","filename","file_path","size","created","metadata","mp3_available","format","folder","listRingtones","downloadRingtone","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","revokeObjectURL","removeChild","deleteRingtone","uploadAudioFile","checkServerHealth","ringtoneService"],"sources":["C:/devops/schedule_ringtone/portable_app/src/services/ringtoneService.ts"],"sourcesContent":["// Rules applied\r\nimport { AudioFile } from '../types/audio';\r\n\r\nexport const API_BASE_URL = 'http://localhost:5000/api';\r\n\r\nexport interface RingtoneInfo {\r\n  id: string;\r\n  name: string;\r\n  size: number;\r\n  created: string;\r\n  modified: string;\r\n  file_path: string;\r\n  original_name?: string;\r\n  start_time?: number;\r\n  end_time?: number;\r\n  duration?: number;\r\n  has_metadata: boolean;\r\n  mp3_filename?: string;\r\n  mp3_available?: boolean;\r\n  format?: string;\r\n  folder?: string;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  success: boolean;\r\n  message?: string;\r\n  error?: string;\r\n  data?: T;\r\n  ringtones?: T;  // For listRingtones endpoint\r\n  count?: number;  // For listRingtones endpoint\r\n}\r\n\r\nclass RingtoneService {\r\n  private async makeRequest<T>(\r\n    endpoint: string,\r\n    options: RequestInit = {}\r\n  ): Promise<ApiResponse<T>> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n          ...options.headers,\r\n        },\r\n        ...options,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error(`API request failed for ${endpoint}:`, error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\r\n      };\r\n    }\r\n  }\r\n\r\n  async saveRingtone(audioFile: AudioFile): Promise<{ \r\n    success: boolean;\r\n    message: string;\r\n    filename: string; \r\n    file_path: string; \r\n    size: number; \r\n    created: string; \r\n    metadata: any;\r\n    mp3_available: boolean;\r\n    format: string;\r\n    folder: string;\r\n    mp3_filename?: string;\r\n    mp3_path?: string;\r\n    error?: string;\r\n  }> {\r\n    try {\r\n      // Convert the audio file to a blob if it's not already\r\n      let fileToUpload: File;\r\n      \r\n      if (audioFile.file instanceof File) {\r\n        fileToUpload = audioFile.file;\r\n      } else {\r\n        // If we have a URL, fetch it and create a file\r\n        const response = await fetch(audioFile.url);\r\n        const blob = await response.blob();\r\n        fileToUpload = new File([blob], audioFile.name, { type: blob.type });\r\n      }\r\n\r\n      const formData = new FormData();\r\n      formData.append('file', fileToUpload);\r\n      \r\n      // Add metadata\r\n      formData.append('original_name', audioFile.name.replace('Ringtone_', ''));\r\n      formData.append('start_time', (audioFile.startTime || 0).toString());\r\n      formData.append('end_time', (audioFile.endTime || 0).toString());\r\n      formData.append('duration', audioFile.duration.toString());\r\n\r\n      const response = await fetch(`${API_BASE_URL}/ringtones`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error saving ringtone:', error);\r\n      return {\r\n        success: false,\r\n        message: 'Failed to save ringtone',\r\n        filename: '',\r\n        file_path: '',\r\n        size: 0,\r\n        created: '',\r\n        metadata: {},\r\n        mp3_available: false,\r\n        format: '',\r\n        folder: '',\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\r\n      };\r\n    }\r\n  }\r\n\r\n  async listRingtones(): Promise<ApiResponse<RingtoneInfo[]>> {\r\n    return this.makeRequest<RingtoneInfo[]>('/ringtones');\r\n  }\r\n\r\n  async downloadRingtone(filename: string, folder?: string): Promise<void> {\r\n    try {\r\n      let endpoint = `/ringtones/${filename}`;\r\n      \r\n      // If folder is provided, use the new folder-based endpoint\r\n      if (folder) {\r\n        endpoint = `/ringtones/${folder}/${filename}`;\r\n      }\r\n      \r\n      const response = await fetch(`${API_BASE_URL}${endpoint}`);\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const blob = await response.blob();\r\n      const url = window.URL.createObjectURL(blob);\r\n      const a = document.createElement('a');\r\n      a.href = url;\r\n      a.download = filename;\r\n      document.body.appendChild(a);\r\n      a.click();\r\n      window.URL.revokeObjectURL(url);\r\n      document.body.removeChild(a);\r\n    } catch (error) {\r\n      console.error('Error downloading ringtone:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteRingtone(filename: string, folder?: string): Promise<ApiResponse<{ filename: string; folder?: string }>> {\r\n    let endpoint = `/ringtones/${filename}`;\r\n    \r\n    // If folder is provided, use the new folder-based endpoint\r\n    if (folder) {\r\n      endpoint = `/ringtones/${folder}/${filename}`;\r\n    }\r\n    \r\n    return this.makeRequest<{ filename: string; folder?: string }>(endpoint, {\r\n      method: 'DELETE',\r\n    });\r\n  }\r\n\r\n  async uploadAudioFile(file: File): Promise<ApiResponse<{ filename: string; file_path: string; size: number; uploaded: string }>> {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n\r\n      const response = await fetch(`${API_BASE_URL}/upload`, {\r\n        method: 'POST',\r\n        body: formData,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json().catch(() => ({}));\r\n        throw new Error(errorData.error || `HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data;\r\n    } catch (error) {\r\n      console.error('Error uploading audio file:', error);\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Unknown error occurred',\r\n      };\r\n    }\r\n  }\r\n\r\n  async checkServerHealth(): Promise<boolean> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL.replace('/api', '')}/health`);\r\n      return response.ok;\r\n    } catch (error) {\r\n      console.error('Server health check failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\nexport const ringtoneService = new RingtoneService();\r\nexport default ringtoneService;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}