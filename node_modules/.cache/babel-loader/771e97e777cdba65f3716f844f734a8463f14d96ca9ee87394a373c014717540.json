{"ast":null,"code":"var _ScheduleService;\n// Rules applied\n\nimport { ringtoneService } from './ringtoneService';\nconst API_BASE_URL = 'http://localhost:5000';\nconst STORAGE_KEY = 'scheduledRingtones';\nexport class ScheduleService {\n  constructor() {\n    this.scheduledRingtones = [];\n    this.checkInterval = null;\n    this.audioElement = null;\n    this.loadFromStorage();\n    this.startScheduleChecker();\n  }\n  static getInstance() {\n    if (!ScheduleService.instance) {\n      ScheduleService.instance = new ScheduleService();\n    }\n    return ScheduleService.instance;\n  }\n\n  // Load scheduled ringtones from localStorage\n  loadFromStorage() {\n    try {\n      const stored = localStorage.getItem(STORAGE_KEY);\n      if (stored) {\n        this.scheduledRingtones = JSON.parse(stored);\n        console.log('üìÖ Loaded scheduled ringtones from storage:', this.scheduledRingtones.length);\n      }\n    } catch (error) {\n      console.error('‚ùå Error loading scheduled ringtones from storage:', error);\n      this.scheduledRingtones = [];\n    }\n  }\n\n  // Save scheduled ringtones to localStorage\n  saveToStorage() {\n    try {\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.scheduledRingtones));\n      console.log('üíæ Saved scheduled ringtones to storage');\n    } catch (error) {\n      console.error('‚ùå Error saving scheduled ringtones to storage:', error);\n    }\n  }\n\n  // Create a new scheduled ringtone\n  async createSchedule(ringtone, formData) {\n    try {\n      console.log('üöÄ Starting schedule creation process...');\n      console.log('üìã Schedule data:', {\n        ringtone: ringtone.name,\n        time: formData.time,\n        days: formData.days\n      });\n      let ringtoneFilePath;\n\n      // Check if this is a backend ringtone (already has a file path)\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\n        console.log('üìÅ This is a backend ringtone, extracting file path from URL...');\n        // Extract the file path from the URL\n        const urlParts = ringtone.url.split('/');\n        const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\n        const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\n\n        // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\n        let preferredFolder = folder;\n        let preferredFilename = filename;\n        if (folder === 'mp3_ringtones') {\n          // Try to find the corresponding WAV file\n          const wavFilename = filename.replace('.mp3', '.wav');\n          preferredFolder = 'wav_ringtones';\n          preferredFilename = wavFilename;\n          console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\n        }\n\n        // Construct the file path using the preferred format\n        ringtoneFilePath = `C:\\\\devops\\\\ringtones\\\\${preferredFolder}\\\\${preferredFilename}`;\n        console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\n      } else {\n        // This is a local ringtone, save it to get the file path\n        console.log('üíæ Saving local ringtone to get file path...');\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\n        if (!saveResult.success) {\n          throw new Error(`Failed to save ringtone: ${saveResult.error || 'Unknown error'}`);\n        }\n        ringtoneFilePath = saveResult.file_path;\n        console.log('‚úÖ Local ringtone saved successfully:', ringtoneFilePath);\n      }\n      const newSchedule = {\n        id: `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\n        ringtoneId: ringtone.id,\n        ringtoneName: ringtone.name,\n        ringtoneUrl: ringtone.url,\n        ringtoneFilePath: ringtoneFilePath,\n        // Store the actual file path\n        time: formData.time,\n        days: formData.days,\n        isActive: true,\n        scheduleSource: formData.scheduleSource,\n        // Store the scheduling method\n        createdAt: new Date().toISOString()\n      };\n      console.log('üìù Created schedule object:', newSchedule);\n\n      // Create Windows Task Scheduler task only if schedule source is 'device'\n      if (formData.scheduleSource === 'device') {\n        console.log('üîÑ Schedule source is device, checking Windows Task Scheduler availability...');\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\n        if (taskSchedulerAvailable) {\n          console.log('‚úÖ Windows Task Scheduler is available, creating task...');\n          try {\n            await this.createWindowsTask(newSchedule);\n            console.log('‚úÖ Windows Task Scheduler task created successfully');\n          } catch (taskError) {\n            console.warn('‚ö†Ô∏è Failed to create Windows Task Scheduler task, but continuing with local schedule:', taskError);\n          }\n        } else {\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, creating local schedule only');\n        }\n      } else {\n        console.log('‚ÑπÔ∏è Schedule source is web, creating browser-based schedule only');\n      }\n      this.scheduledRingtones.push(newSchedule);\n      this.saveToStorage();\n      console.log('‚úÖ Created new schedule with Windows Task:', newSchedule);\n      return newSchedule;\n    } catch (error) {\n      console.error('‚ùå Error creating schedule:', error);\n      throw error;\n    }\n  }\n\n  // Get all scheduled ringtones\n  getAllSchedules() {\n    return [...this.scheduledRingtones];\n  }\n\n  // Get active scheduled ringtones\n  getActiveSchedules() {\n    return this.scheduledRingtones.filter(schedule => schedule.isActive);\n  }\n\n  // Update a scheduled ringtone\n  updateSchedule(id, updates) {\n    try {\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\n      if (index === -1) {\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\n        return false;\n      }\n      this.scheduledRingtones[index] = {\n        ...this.scheduledRingtones[index],\n        ...updates\n      };\n      this.saveToStorage();\n      console.log('‚úÖ Updated schedule:', id);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error updating schedule:', error);\n      return false;\n    }\n  }\n\n  // Update a scheduled ringtone with form data\n  async updateScheduleWithFormData(id, ringtone, formData) {\n    try {\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\n      if (index === -1) {\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\n        return false;\n      }\n      const oldSchedule = this.scheduledRingtones[index];\n\n      // Delete old Windows task\n      await this.deleteWindowsTask(oldSchedule.id);\n      let ringtoneFilePath;\n\n      // Check if this is a backend ringtone (already has a file path)\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\n        console.log('üìÅ This is a backend ringtone, extracting file path from URL...');\n        // Extract the file path from the URL\n        const urlParts = ringtone.url.split('/');\n        const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\n        const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\n\n        // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\n        let preferredFolder = folder;\n        let preferredFilename = filename;\n        if (folder === 'mp3_ringtones') {\n          // Try to find the corresponding WAV file\n          const wavFilename = filename.replace('.mp3', '.wav');\n          preferredFolder = 'wav_ringtones';\n          preferredFilename = wavFilename;\n          console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\n        }\n\n        // Construct the file path using the preferred format\n        ringtoneFilePath = `C:\\\\devops\\\\ringtones\\\\${preferredFolder}\\\\${preferredFilename}`;\n        console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\n      } else {\n        // This is a local ringtone, save it to get the file path\n        console.log('üíæ Saving updated ringtone to get file path...');\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\n        if (!saveResult.success) {\n          throw new Error(`Failed to save updated ringtone: ${saveResult.error || 'Unknown error'}`);\n        }\n        ringtoneFilePath = saveResult.file_path;\n        console.log('‚úÖ Updated ringtone saved successfully:', ringtoneFilePath);\n      }\n      const updates = {\n        ringtoneId: ringtone.id,\n        ringtoneName: ringtone.name,\n        ringtoneUrl: ringtone.url,\n        ringtoneFilePath: ringtoneFilePath,\n        // Store the actual file path\n        time: formData.time,\n        days: formData.days,\n        scheduleSource: formData.scheduleSource // Update the scheduling method\n      };\n      const updatedSchedule = {\n        ...this.scheduledRingtones[index],\n        ...updates\n      };\n\n      // Create new Windows task only if schedule source is 'device'\n      if (formData.scheduleSource === 'device') {\n        await this.createWindowsTask(updatedSchedule);\n      }\n      this.scheduledRingtones[index] = updatedSchedule;\n      this.saveToStorage();\n      console.log('‚úÖ Updated schedule with form data and Windows Task:', id);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error updating schedule with form data:', error);\n      return false;\n    }\n  }\n\n  // Delete a scheduled ringtone\n  async deleteSchedule(id) {\n    try {\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\n      if (index === -1) {\n        console.warn('‚ö†Ô∏è Schedule not found for deletion:', id);\n        return false;\n      }\n      const scheduleToDelete = this.scheduledRingtones[index];\n\n      // Try to delete Windows Task Scheduler task only for device-based schedules\n      if (scheduleToDelete.scheduleSource === 'device') {\n        try {\n          await this.deleteWindowsTask(id);\n          console.log('‚úÖ Deleted Windows Task Scheduler task:', id);\n        } catch (taskError) {\n          console.warn('‚ö†Ô∏è Failed to delete Windows Task Scheduler task, but continuing with local deletion:', taskError);\n          // Continue with local deletion even if Windows task deletion fails\n        }\n      } else {\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler task to delete');\n      }\n\n      // Always delete from local storage\n      this.scheduledRingtones.splice(index, 1);\n      this.saveToStorage();\n      console.log('‚úÖ Deleted schedule:', id);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error deleting schedule:', error);\n      return false;\n    }\n  }\n\n  // Toggle schedule active status\n  async toggleSchedule(id) {\n    try {\n      const schedule = this.scheduledRingtones.find(s => s.id === id);\n      if (!schedule) {\n        console.warn('‚ö†Ô∏è Schedule not found for toggle:', id);\n        return false;\n      }\n      schedule.isActive = !schedule.isActive;\n\n      // Update Windows Task Scheduler task status only for device-based schedules\n      if (schedule.scheduleSource === 'device') {\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\n        if (taskSchedulerAvailable) {\n          try {\n            if (schedule.isActive) {\n              await this.enableWindowsTask(id);\n            } else {\n              await this.disableWindowsTask(id);\n            }\n          } catch (taskError) {\n            console.warn('‚ö†Ô∏è Failed to update Windows Task Scheduler task, but continuing with local update:', taskError);\n          }\n        } else {\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, updating local schedule only');\n        }\n      } else {\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler interaction needed');\n      }\n      this.saveToStorage();\n      console.log('‚úÖ Toggled schedule and Windows Task:', id, 'Active:', schedule.isActive);\n      return true;\n    } catch (error) {\n      console.error('‚ùå Error toggling schedule:', error);\n      return false;\n    }\n  }\n\n  // Start the schedule checker\n  startScheduleChecker() {\n    // Check every minute\n    this.checkInterval = setInterval(() => {\n      this.checkSchedules();\n    }, 60000); // 60 seconds\n\n    console.log('‚è∞ Started schedule checker');\n  }\n\n  // Stop the schedule checker\n  stopScheduleChecker() {\n    if (this.checkInterval) {\n      clearInterval(this.checkInterval);\n      this.checkInterval = null;\n      console.log('‚èπÔ∏è Stopped schedule checker');\n    }\n  }\n\n  // Check if any schedules should be triggered\n  checkSchedules() {\n    try {\n      const now = new Date();\n      const currentTime = now.toTimeString().slice(0, 5); // \"HH:MM\" format\n      const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\n\n      const activeSchedules = this.getActiveSchedules();\n      for (const schedule of activeSchedules) {\n        // Check if it's the right time and day\n        if (schedule.time === currentTime && schedule.days.includes(currentDay)) {\n          // Check if we haven't played this schedule today\n          const today = now.toDateString();\n          const lastPlayed = schedule.lastPlayed ? new Date(schedule.lastPlayed).toDateString() : null;\n          if (lastPlayed !== today) {\n            this.playScheduledRingtone(schedule);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('‚ùå Error checking schedules:', error);\n    }\n  }\n\n  // Play a scheduled ringtone\n  async playScheduledRingtone(schedule) {\n    try {\n      console.log('üîî Playing scheduled ringtone:', schedule.ringtoneName);\n\n      // Create audio element if it doesn't exist\n      if (!this.audioElement) {\n        this.audioElement = new Audio();\n      }\n\n      // Set the audio source\n      this.audioElement.src = schedule.ringtoneUrl;\n      this.audioElement.volume = 1.0; // Full volume for scheduled ringtones\n\n      // Play the audio\n      await this.audioElement.play();\n\n      // Update last played time\n      this.updateSchedule(schedule.id, {\n        lastPlayed: new Date().toISOString()\n      });\n      console.log('‚úÖ Scheduled ringtone played successfully');\n    } catch (error) {\n      console.error('‚ùå Error playing scheduled ringtone:', error);\n    }\n  }\n\n  // Stop current audio\n  stopAudio() {\n    try {\n      if (this.audioElement) {\n        this.audioElement.pause();\n        this.audioElement.currentTime = 0;\n        console.log('‚èπÔ∏è Audio stopped');\n      }\n    } catch (error) {\n      console.error('‚ùå Error stopping audio:', error);\n    }\n  }\n\n  // Check if Windows Task Scheduler service is available\n  async isTaskSchedulerAvailable() {\n    try {\n      console.log('üîç Checking Windows Task Scheduler availability...');\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/status`, {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      console.log('üì° Task Scheduler status response:', response.status, response.statusText);\n      if (!response.ok) {\n        console.warn('‚ùå Task Scheduler status endpoint returned error:', response.status, response.statusText);\n        return false;\n      }\n      const result = await response.json();\n      console.log('üìã Task Scheduler status result:', result);\n      const isAvailable = result.success && result.available;\n      console.log('‚úÖ Task Scheduler available:', isAvailable);\n      return isAvailable;\n    } catch (error) {\n      console.error('‚ùå Error checking Windows Task Scheduler service:', error);\n      return false;\n    }\n  }\n\n  // Windows Task Scheduler integration methods\n  async createWindowsTask(schedule) {\n    try {\n      // Use the file path if available, otherwise fall back to URL\n      const ringtonePath = schedule.ringtoneFilePath || schedule.ringtoneUrl;\n      if (!schedule.ringtoneFilePath) {\n        console.warn('‚ö†Ô∏è No file path available for ringtone, using URL (may not work with Windows Task Scheduler)');\n      }\n      console.log('üîß Creating Windows Task with ringtone path:', ringtonePath);\n      console.log('üîß Schedule object:', schedule);\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/create`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: schedule.id,\n          ringtone_path: ringtonePath,\n          time: schedule.time,\n          days: schedule.days\n        })\n      });\n      const result = await response.json();\n      if (!result.success) {\n        console.error('‚ùå Windows Task Scheduler API error:', result);\n        throw new Error(result.error || 'Failed to create Windows task');\n      }\n      console.log('‚úÖ Created Windows Task Scheduler task:', schedule.id);\n    } catch (error) {\n      console.error('‚ùå Error creating Windows task:', error);\n      throw error;\n    }\n  }\n  async deleteWindowsTask(taskId) {\n    try {\n      console.log('üîÑ Attempting to delete Windows Task Scheduler task:', taskId);\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/delete`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: taskId\n        })\n      });\n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to delete Windows task');\n      }\n      console.log('‚úÖ Deleted Windows Task Scheduler task:', taskId);\n    } catch (error) {\n      console.error('‚ùå Error deleting Windows task:', error);\n      throw error;\n    }\n  }\n  async enableWindowsTask(taskId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/enable`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: taskId\n        })\n      });\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to enable Windows task');\n      }\n      console.log('‚úÖ Enabled Windows Task Scheduler task:', taskId);\n    } catch (error) {\n      console.error('‚ùå Error enabling Windows task:', error);\n      throw error;\n    }\n  }\n  async disableWindowsTask(taskId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/disable`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          task_name: taskId\n        })\n      });\n      const result = await response.json();\n      if (!result.success) {\n        throw new Error(result.error || 'Failed to disable Windows task');\n      }\n      console.log('‚úÖ Disabled Windows Task Scheduler task:', taskId);\n    } catch (error) {\n      console.error('‚ùå Error disabling Windows task:', error);\n      throw error;\n    }\n  }\n\n  // Test ringtone playback using Windows Task Scheduler service or fallback\n  async testPlayRingtone(ringtone) {\n    try {\n      // Try Windows Task Scheduler service first\n      const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\n      if (taskSchedulerAvailable) {\n        try {\n          let ringtoneFilePath;\n\n          // Check if this is a backend ringtone (already has a file path)\n          if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\n            console.log('üìÅ This is a backend ringtone, extracting file path from URL...');\n            // Extract the file path from the URL\n            const urlParts = ringtone.url.split('/');\n            const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\n            const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\n\n            // Construct the file path\n            ringtoneFilePath = `C:\\\\devops\\\\schedule_ringtone\\\\ringtones\\\\${folder}\\\\${filename}`;\n            console.log('‚úÖ Extracted file path from backend URL:', ringtoneFilePath);\n          } else {\n            // This is a local ringtone, save it to get the file path\n            console.log('üíæ Saving ringtone for testing...');\n            const saveResult = await ringtoneService.saveRingtone(ringtone);\n            if (!saveResult.success) {\n              throw new Error(`Failed to save ringtone for testing: ${saveResult.error || 'Unknown error'}`);\n            }\n            ringtoneFilePath = saveResult.file_path;\n            console.log('‚úÖ Ringtone saved for testing:', ringtoneFilePath);\n          }\n          const response = await fetch(`${API_BASE_URL}/api/task-scheduler/test`, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              ringtone_path: ringtoneFilePath\n            })\n          });\n          const result = await response.json();\n          if (!result.success) {\n            throw new Error(result.error || 'Failed to test ringtone');\n          }\n          console.log('‚úÖ Tested ringtone via Windows Task Scheduler:', ringtone.name);\n          return;\n        } catch (taskError) {\n          console.warn('‚ö†Ô∏è Windows Task Scheduler test failed, falling back to browser audio:', taskError);\n        }\n      }\n\n      // Fallback to browser audio\n      console.log('üîÑ Using browser audio fallback for testing:', ringtone.name);\n      if (!this.audioElement) {\n        this.audioElement = new Audio();\n      }\n      this.audioElement.src = ringtone.url;\n      this.audioElement.volume = 0.5; // Lower volume for testing\n\n      await this.audioElement.play();\n      console.log('‚úÖ Test ringtone played successfully via browser audio');\n    } catch (error) {\n      console.error('‚ùå Error testing ringtone:', error);\n      throw error;\n    }\n  }\n\n  // Cleanup method\n  destroy() {\n    this.stopScheduleChecker();\n    this.stopAudio();\n    this.audioElement = null;\n  }\n}\n\n// Export singleton instance\n_ScheduleService = ScheduleService;\nScheduleService.instance = void 0;\nexport const scheduleService = ScheduleService.getInstance();","map":{"version":3,"names":["ringtoneService","API_BASE_URL","STORAGE_KEY","ScheduleService","constructor","scheduledRingtones","checkInterval","audioElement","loadFromStorage","startScheduleChecker","getInstance","instance","stored","localStorage","getItem","JSON","parse","console","log","length","error","saveToStorage","setItem","stringify","createSchedule","ringtone","formData","name","time","days","ringtoneFilePath","url","startsWith","urlParts","split","folder","filename","preferredFolder","preferredFilename","wavFilename","replace","saveResult","saveRingtone","success","Error","file_path","newSchedule","id","Date","now","Math","random","toString","substr","ringtoneId","ringtoneName","ringtoneUrl","isActive","scheduleSource","createdAt","toISOString","taskSchedulerAvailable","isTaskSchedulerAvailable","createWindowsTask","taskError","warn","push","getAllSchedules","getActiveSchedules","filter","schedule","updateSchedule","updates","index","findIndex","updateScheduleWithFormData","oldSchedule","deleteWindowsTask","updatedSchedule","deleteSchedule","scheduleToDelete","splice","toggleSchedule","find","s","enableWindowsTask","disableWindowsTask","setInterval","checkSchedules","stopScheduleChecker","clearInterval","currentTime","toTimeString","slice","currentDay","getDay","activeSchedules","includes","today","toDateString","lastPlayed","playScheduledRingtone","Audio","src","volume","play","stopAudio","pause","response","fetch","method","headers","status","statusText","ok","result","json","isAvailable","available","ringtonePath","body","task_name","ringtone_path","taskId","testPlayRingtone","destroy","_ScheduleService","scheduleService"],"sources":["C:/devops/schedule_ringtone/src/services/scheduleService.ts"],"sourcesContent":["// Rules applied\r\nimport { ScheduledRingtone, ScheduleFormData } from '../types/schedule';\r\nimport { AudioFile } from '../types/audio';\r\nimport { ringtoneService } from './ringtoneService';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000';\r\n\r\nconst STORAGE_KEY = 'scheduledRingtones';\r\n\r\nexport class ScheduleService {\r\n  private static instance: ScheduleService;\r\n  private scheduledRingtones: ScheduledRingtone[] = [];\r\n  private checkInterval: NodeJS.Timeout | null = null;\r\n  private audioElement: HTMLAudioElement | null = null;\r\n\r\n  private constructor() {\r\n    this.loadFromStorage();\r\n    this.startScheduleChecker();\r\n  }\r\n\r\n  public static getInstance(): ScheduleService {\r\n    if (!ScheduleService.instance) {\r\n      ScheduleService.instance = new ScheduleService();\r\n    }\r\n    return ScheduleService.instance;\r\n  }\r\n\r\n  // Load scheduled ringtones from localStorage\r\n  private loadFromStorage(): void {\r\n    try {\r\n      const stored = localStorage.getItem(STORAGE_KEY);\r\n      if (stored) {\r\n        this.scheduledRingtones = JSON.parse(stored);\r\n        console.log('üìÖ Loaded scheduled ringtones from storage:', this.scheduledRingtones.length);\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error loading scheduled ringtones from storage:', error);\r\n      this.scheduledRingtones = [];\r\n    }\r\n  }\r\n\r\n  // Save scheduled ringtones to localStorage\r\n  private saveToStorage(): void {\r\n    try {\r\n      localStorage.setItem(STORAGE_KEY, JSON.stringify(this.scheduledRingtones));\r\n      console.log('üíæ Saved scheduled ringtones to storage');\r\n    } catch (error) {\r\n      console.error('‚ùå Error saving scheduled ringtones to storage:', error);\r\n    }\r\n  }\r\n\r\n  // Create a new scheduled ringtone\r\n  public async createSchedule(ringtone: AudioFile, formData: ScheduleFormData): Promise<ScheduledRingtone> {\r\n    try {\r\n      console.log('üöÄ Starting schedule creation process...');\r\n      console.log('üìã Schedule data:', { ringtone: ringtone.name, time: formData.time, days: formData.days });\r\n      \r\n      let ringtoneFilePath: string;\r\n      \r\n      // Check if this is a backend ringtone (already has a file path)\r\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\r\n        console.log('üìÅ This is a backend ringtone, extracting file path from URL...');\r\n        // Extract the file path from the URL\r\n        const urlParts = ringtone.url.split('/');\r\n        const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\r\n        const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\r\n        \r\n        // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\r\n        let preferredFolder = folder;\r\n        let preferredFilename = filename;\r\n        \r\n        if (folder === 'mp3_ringtones') {\r\n          // Try to find the corresponding WAV file\r\n          const wavFilename = filename.replace('.mp3', '.wav');\r\n          preferredFolder = 'wav_ringtones';\r\n          preferredFilename = wavFilename;\r\n          console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\r\n        }\r\n        \r\n        // Construct the file path using the preferred format\r\n        ringtoneFilePath = `C:\\\\devops\\\\ringtones\\\\${preferredFolder}\\\\${preferredFilename}`;\r\n        console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\r\n      } else {\r\n        // This is a local ringtone, save it to get the file path\r\n        console.log('üíæ Saving local ringtone to get file path...');\r\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n        \r\n        if (!saveResult.success) {\r\n          throw new Error(`Failed to save ringtone: ${saveResult.error || 'Unknown error'}`);\r\n        }\r\n        \r\n        ringtoneFilePath = saveResult.file_path;\r\n        console.log('‚úÖ Local ringtone saved successfully:', ringtoneFilePath);\r\n      }\r\n      \r\n      const newSchedule: ScheduledRingtone = {\r\n        id: `schedule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n        ringtoneId: ringtone.id,\r\n        ringtoneName: ringtone.name,\r\n        ringtoneUrl: ringtone.url,\r\n        ringtoneFilePath: ringtoneFilePath, // Store the actual file path\r\n        time: formData.time,\r\n        days: formData.days,\r\n        isActive: true,\r\n        scheduleSource: formData.scheduleSource, // Store the scheduling method\r\n        createdAt: new Date().toISOString(),\r\n      };\r\n\r\n      console.log('üìù Created schedule object:', newSchedule);\r\n\r\n      // Create Windows Task Scheduler task only if schedule source is 'device'\r\n      if (formData.scheduleSource === 'device') {\r\n        console.log('üîÑ Schedule source is device, checking Windows Task Scheduler availability...');\r\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\r\n        if (taskSchedulerAvailable) {\r\n          console.log('‚úÖ Windows Task Scheduler is available, creating task...');\r\n          try {\r\n            await this.createWindowsTask(newSchedule);\r\n            console.log('‚úÖ Windows Task Scheduler task created successfully');\r\n          } catch (taskError) {\r\n            console.warn('‚ö†Ô∏è Failed to create Windows Task Scheduler task, but continuing with local schedule:', taskError);\r\n          }\r\n        } else {\r\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, creating local schedule only');\r\n        }\r\n      } else {\r\n        console.log('‚ÑπÔ∏è Schedule source is web, creating browser-based schedule only');\r\n      }\r\n\r\n      this.scheduledRingtones.push(newSchedule);\r\n      this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Created new schedule with Windows Task:', newSchedule);\r\n      return newSchedule;\r\n    } catch (error) {\r\n      console.error('‚ùå Error creating schedule:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get all scheduled ringtones\r\n  public getAllSchedules(): ScheduledRingtone[] {\r\n    return [...this.scheduledRingtones];\r\n  }\r\n\r\n  // Get active scheduled ringtones\r\n  public getActiveSchedules(): ScheduledRingtone[] {\r\n    return this.scheduledRingtones.filter(schedule => schedule.isActive);\r\n  }\r\n\r\n  // Update a scheduled ringtone\r\n  public updateSchedule(id: string, updates: Partial<ScheduledRingtone>): boolean {\r\n    try {\r\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\r\n      if (index === -1) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\r\n        return false;\r\n      }\r\n\r\n      this.scheduledRingtones[index] = { ...this.scheduledRingtones[index], ...updates };\r\n      this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Updated schedule:', id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error updating schedule:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Update a scheduled ringtone with form data\r\n  public async updateScheduleWithFormData(id: string, ringtone: AudioFile, formData: ScheduleFormData): Promise<boolean> {\r\n    try {\r\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\r\n      if (index === -1) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for update:', id);\r\n        return false;\r\n      }\r\n\r\n      const oldSchedule = this.scheduledRingtones[index];\r\n      \r\n      // Delete old Windows task\r\n      await this.deleteWindowsTask(oldSchedule.id);\r\n      \r\n      let ringtoneFilePath: string;\r\n      \r\n      // Check if this is a backend ringtone (already has a file path)\r\n      if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\r\n        console.log('üìÅ This is a backend ringtone, extracting file path from URL...');\r\n        // Extract the file path from the URL\r\n        const urlParts = ringtone.url.split('/');\r\n        const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\r\n        const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\r\n        \r\n        // Prefer WAV format for scheduling (more reliable for Windows Task Scheduler)\r\n        let preferredFolder = folder;\r\n        let preferredFilename = filename;\r\n        \r\n        if (folder === 'mp3_ringtones') {\r\n          // Try to find the corresponding WAV file\r\n          const wavFilename = filename.replace('.mp3', '.wav');\r\n          preferredFolder = 'wav_ringtones';\r\n          preferredFilename = wavFilename;\r\n          console.log('üîÑ Preferring WAV format for scheduling:', preferredFilename);\r\n        }\r\n        \r\n        // Construct the file path using the preferred format\r\n        ringtoneFilePath = `C:\\\\devops\\\\ringtones\\\\${preferredFolder}\\\\${preferredFilename}`;\r\n        console.log('‚úÖ Extracted file path from backend URL (preferred format):', ringtoneFilePath);\r\n      } else {\r\n        // This is a local ringtone, save it to get the file path\r\n        console.log('üíæ Saving updated ringtone to get file path...');\r\n        const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n        \r\n        if (!saveResult.success) {\r\n          throw new Error(`Failed to save updated ringtone: ${saveResult.error || 'Unknown error'}`);\r\n        }\r\n        \r\n        ringtoneFilePath = saveResult.file_path;\r\n        console.log('‚úÖ Updated ringtone saved successfully:', ringtoneFilePath);\r\n      }\r\n      \r\n      const updates: Partial<ScheduledRingtone> = {\r\n        ringtoneId: ringtone.id,\r\n        ringtoneName: ringtone.name,\r\n        ringtoneUrl: ringtone.url,\r\n        ringtoneFilePath: ringtoneFilePath, // Store the actual file path\r\n        time: formData.time,\r\n        days: formData.days,\r\n        scheduleSource: formData.scheduleSource // Update the scheduling method\r\n      };\r\n\r\n      const updatedSchedule = { ...this.scheduledRingtones[index], ...updates };\r\n      \r\n      // Create new Windows task only if schedule source is 'device'\r\n      if (formData.scheduleSource === 'device') {\r\n        await this.createWindowsTask(updatedSchedule);\r\n      }\r\n\r\n      this.scheduledRingtones[index] = updatedSchedule;\r\n      this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Updated schedule with form data and Windows Task:', id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error updating schedule with form data:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Delete a scheduled ringtone\r\n  public async deleteSchedule(id: string): Promise<boolean> {\r\n    try {\r\n      const index = this.scheduledRingtones.findIndex(schedule => schedule.id === id);\r\n      if (index === -1) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for deletion:', id);\r\n        return false;\r\n      }\r\n\r\n      const scheduleToDelete = this.scheduledRingtones[index];\r\n\r\n      // Try to delete Windows Task Scheduler task only for device-based schedules\r\n      if (scheduleToDelete.scheduleSource === 'device') {\r\n        try {\r\n          await this.deleteWindowsTask(id);\r\n          console.log('‚úÖ Deleted Windows Task Scheduler task:', id);\r\n        } catch (taskError) {\r\n          console.warn('‚ö†Ô∏è Failed to delete Windows Task Scheduler task, but continuing with local deletion:', taskError);\r\n          // Continue with local deletion even if Windows task deletion fails\r\n        }\r\n      } else {\r\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler task to delete');\r\n      }\r\n\r\n      // Always delete from local storage\r\n      this.scheduledRingtones.splice(index, 1);\r\n      this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Deleted schedule:', id);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error deleting schedule:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Toggle schedule active status\r\n  public async toggleSchedule(id: string): Promise<boolean> {\r\n    try {\r\n      const schedule = this.scheduledRingtones.find(s => s.id === id);\r\n      if (!schedule) {\r\n        console.warn('‚ö†Ô∏è Schedule not found for toggle:', id);\r\n        return false;\r\n      }\r\n\r\n      schedule.isActive = !schedule.isActive;\r\n      \r\n      // Update Windows Task Scheduler task status only for device-based schedules\r\n      if (schedule.scheduleSource === 'device') {\r\n        const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\r\n        if (taskSchedulerAvailable) {\r\n          try {\r\n            if (schedule.isActive) {\r\n              await this.enableWindowsTask(id);\r\n            } else {\r\n              await this.disableWindowsTask(id);\r\n            }\r\n          } catch (taskError) {\r\n            console.warn('‚ö†Ô∏è Failed to update Windows Task Scheduler task, but continuing with local update:', taskError);\r\n          }\r\n        } else {\r\n          console.log('‚ÑπÔ∏è Windows Task Scheduler not available, updating local schedule only');\r\n        }\r\n      } else {\r\n        console.log('‚ÑπÔ∏è Web-based schedule, no Windows Task Scheduler interaction needed');\r\n      }\r\n      \r\n      this.saveToStorage();\r\n      \r\n      console.log('‚úÖ Toggled schedule and Windows Task:', id, 'Active:', schedule.isActive);\r\n      return true;\r\n    } catch (error) {\r\n      console.error('‚ùå Error toggling schedule:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Start the schedule checker\r\n  private startScheduleChecker(): void {\r\n    // Check every minute\r\n    this.checkInterval = setInterval(() => {\r\n      this.checkSchedules();\r\n    }, 60000); // 60 seconds\r\n\r\n    console.log('‚è∞ Started schedule checker');\r\n  }\r\n\r\n  // Stop the schedule checker\r\n  public stopScheduleChecker(): void {\r\n    if (this.checkInterval) {\r\n      clearInterval(this.checkInterval);\r\n      this.checkInterval = null;\r\n      console.log('‚èπÔ∏è Stopped schedule checker');\r\n    }\r\n  }\r\n\r\n  // Check if any schedules should be triggered\r\n  private checkSchedules(): void {\r\n    try {\r\n      const now = new Date();\r\n      const currentTime = now.toTimeString().slice(0, 5); // \"HH:MM\" format\r\n      const currentDay = now.getDay(); // 0 = Sunday, 1 = Monday, etc.\r\n\r\n      const activeSchedules = this.getActiveSchedules();\r\n      \r\n      for (const schedule of activeSchedules) {\r\n        // Check if it's the right time and day\r\n        if (schedule.time === currentTime && schedule.days.includes(currentDay)) {\r\n          // Check if we haven't played this schedule today\r\n          const today = now.toDateString();\r\n          const lastPlayed = schedule.lastPlayed ? new Date(schedule.lastPlayed).toDateString() : null;\r\n          \r\n          if (lastPlayed !== today) {\r\n            this.playScheduledRingtone(schedule);\r\n          }\r\n        }\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error checking schedules:', error);\r\n    }\r\n  }\r\n\r\n  // Play a scheduled ringtone\r\n  private async playScheduledRingtone(schedule: ScheduledRingtone): Promise<void> {\r\n    try {\r\n      console.log('üîî Playing scheduled ringtone:', schedule.ringtoneName);\r\n      \r\n      // Create audio element if it doesn't exist\r\n      if (!this.audioElement) {\r\n        this.audioElement = new Audio();\r\n      }\r\n\r\n      // Set the audio source\r\n      this.audioElement.src = schedule.ringtoneUrl;\r\n      this.audioElement.volume = 1.0; // Full volume for scheduled ringtones\r\n      \r\n      // Play the audio\r\n      await this.audioElement.play();\r\n      \r\n      // Update last played time\r\n      this.updateSchedule(schedule.id, { lastPlayed: new Date().toISOString() });\r\n      \r\n      console.log('‚úÖ Scheduled ringtone played successfully');\r\n    } catch (error) {\r\n      console.error('‚ùå Error playing scheduled ringtone:', error);\r\n    }\r\n  }\r\n\r\n\r\n  // Stop current audio\r\n  public stopAudio(): void {\r\n    try {\r\n      if (this.audioElement) {\r\n        this.audioElement.pause();\r\n        this.audioElement.currentTime = 0;\r\n        console.log('‚èπÔ∏è Audio stopped');\r\n      }\r\n    } catch (error) {\r\n      console.error('‚ùå Error stopping audio:', error);\r\n    }\r\n  }\r\n\r\n  // Check if Windows Task Scheduler service is available\r\n  private async isTaskSchedulerAvailable(): Promise<boolean> {\r\n    try {\r\n      console.log('üîç Checking Windows Task Scheduler availability...');\r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/status`, {\r\n        method: 'GET',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        }\r\n      });\r\n\r\n      console.log('üì° Task Scheduler status response:', response.status, response.statusText);\r\n\r\n      if (!response.ok) {\r\n        console.warn('‚ùå Task Scheduler status endpoint returned error:', response.status, response.statusText);\r\n        return false;\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('üìã Task Scheduler status result:', result);\r\n      \r\n      const isAvailable = result.success && result.available;\r\n      console.log('‚úÖ Task Scheduler available:', isAvailable);\r\n      return isAvailable;\r\n    } catch (error) {\r\n      console.error('‚ùå Error checking Windows Task Scheduler service:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Windows Task Scheduler integration methods\r\n  private async createWindowsTask(schedule: ScheduledRingtone): Promise<void> {\r\n    try {\r\n      // Use the file path if available, otherwise fall back to URL\r\n      const ringtonePath = schedule.ringtoneFilePath || schedule.ringtoneUrl;\r\n      \r\n      if (!schedule.ringtoneFilePath) {\r\n        console.warn('‚ö†Ô∏è No file path available for ringtone, using URL (may not work with Windows Task Scheduler)');\r\n      }\r\n      \r\n      console.log('üîß Creating Windows Task with ringtone path:', ringtonePath);\r\n      console.log('üîß Schedule object:', schedule);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/create`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: schedule.id,\r\n          ringtone_path: ringtonePath,\r\n          time: schedule.time,\r\n          days: schedule.days\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        console.error('‚ùå Windows Task Scheduler API error:', result);\r\n        throw new Error(result.error || 'Failed to create Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Created Windows Task Scheduler task:', schedule.id);\r\n    } catch (error) {\r\n      console.error('‚ùå Error creating Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async deleteWindowsTask(taskId: string): Promise<void> {\r\n    try {\r\n      console.log('üîÑ Attempting to delete Windows Task Scheduler task:', taskId);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/delete`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: taskId\r\n        })\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Failed to delete Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Deleted Windows Task Scheduler task:', taskId);\r\n    } catch (error) {\r\n      console.error('‚ùå Error deleting Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async enableWindowsTask(taskId: string): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/enable`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: taskId\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Failed to enable Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Enabled Windows Task Scheduler task:', taskId);\r\n    } catch (error) {\r\n      console.error('‚ùå Error enabling Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private async disableWindowsTask(taskId: string): Promise<void> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/api/task-scheduler/disable`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({\r\n          task_name: taskId\r\n        })\r\n      });\r\n\r\n      const result = await response.json();\r\n      if (!result.success) {\r\n        throw new Error(result.error || 'Failed to disable Windows task');\r\n      }\r\n\r\n      console.log('‚úÖ Disabled Windows Task Scheduler task:', taskId);\r\n    } catch (error) {\r\n      console.error('‚ùå Error disabling Windows task:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Test ringtone playback using Windows Task Scheduler service or fallback\r\n  public async testPlayRingtone(ringtone: AudioFile): Promise<void> {\r\n    try {\r\n      // Try Windows Task Scheduler service first\r\n      const taskSchedulerAvailable = await this.isTaskSchedulerAvailable();\r\n      if (taskSchedulerAvailable) {\r\n        try {\r\n          let ringtoneFilePath: string;\r\n          \r\n          // Check if this is a backend ringtone (already has a file path)\r\n          if (ringtone.url.startsWith('http://localhost:5000/api/ringtones/')) {\r\n            console.log('üìÅ This is a backend ringtone, extracting file path from URL...');\r\n            // Extract the file path from the URL\r\n            const urlParts = ringtone.url.split('/');\r\n            const folder = urlParts[urlParts.length - 2]; // e.g., 'wav_ringtones' or 'mp3_ringtones'\r\n            const filename = urlParts[urlParts.length - 1]; // e.g., 'ringtone_20231201_120000_song.wav'\r\n            \r\n            // Construct the file path\r\n            ringtoneFilePath = `C:\\\\devops\\\\schedule_ringtone\\\\ringtones\\\\${folder}\\\\${filename}`;\r\n            console.log('‚úÖ Extracted file path from backend URL:', ringtoneFilePath);\r\n          } else {\r\n            // This is a local ringtone, save it to get the file path\r\n            console.log('üíæ Saving ringtone for testing...');\r\n            const saveResult = await ringtoneService.saveRingtone(ringtone);\r\n            \r\n            if (!saveResult.success) {\r\n              throw new Error(`Failed to save ringtone for testing: ${saveResult.error || 'Unknown error'}`);\r\n            }\r\n            \r\n            ringtoneFilePath = saveResult.file_path;\r\n            console.log('‚úÖ Ringtone saved for testing:', ringtoneFilePath);\r\n          }\r\n          \r\n          const response = await fetch(`${API_BASE_URL}/api/task-scheduler/test`, {\r\n            method: 'POST',\r\n            headers: {\r\n              'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({\r\n              ringtone_path: ringtoneFilePath\r\n            })\r\n          });\r\n\r\n          const result = await response.json();\r\n          if (!result.success) {\r\n            throw new Error(result.error || 'Failed to test ringtone');\r\n          }\r\n\r\n          console.log('‚úÖ Tested ringtone via Windows Task Scheduler:', ringtone.name);\r\n          return;\r\n        } catch (taskError) {\r\n          console.warn('‚ö†Ô∏è Windows Task Scheduler test failed, falling back to browser audio:', taskError);\r\n        }\r\n      }\r\n\r\n      // Fallback to browser audio\r\n      console.log('üîÑ Using browser audio fallback for testing:', ringtone.name);\r\n      if (!this.audioElement) {\r\n        this.audioElement = new Audio();\r\n      }\r\n\r\n      this.audioElement.src = ringtone.url;\r\n      this.audioElement.volume = 0.5; // Lower volume for testing\r\n      \r\n      await this.audioElement.play();\r\n      console.log('‚úÖ Test ringtone played successfully via browser audio');\r\n    } catch (error) {\r\n      console.error('‚ùå Error testing ringtone:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Cleanup method\r\n  public destroy(): void {\r\n    this.stopScheduleChecker();\r\n    this.stopAudio();\r\n    this.audioElement = null;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const scheduleService = ScheduleService.getInstance();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}